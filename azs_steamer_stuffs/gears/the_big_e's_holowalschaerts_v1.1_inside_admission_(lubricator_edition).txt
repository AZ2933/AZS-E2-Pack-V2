@name The Big E's HoloWalschaerts V1.1 Inside Admission (Lubricator Edition)
@inputs Values:array WheelRotation Reverser
@outputs RevMain:entity ValveMotion ValveSpin AngleTest AngleTest2 AngleTest3
@persist Values:array WheelRotation Base:entity Reverser RodMat:string PMoveL Aaa PistonForward Radius 
@persist P EM EA EO:vector CO:vector CAO CAM CL UO:vector UL ExLinkAngL ExLinkAngR
@persist ValveStmL ComboAngL PL:entity UnionAngL EccAngL EccRAngL PistonHeight PWidth H ValveStmR PMoveR ComboAngR PR:entity UnionAngR EccAngR EccRAngR RevMain:entity PRWidth
@persist RRL ERL ED VSH VSF VSAW ELF ELW ELH HPV VSTRRD CLL ELD ELS ERS CLS VSL VSS VSW CLW ULW ULS ULL ULPP:vector CAPP:vector CAS CAAL CAMA CASA LCSA LSSA ValveMul LubeSwing
@persist ValveMov Swing ValveAng LastVAngChange ReversedValveMotion LC
@trigger #WheelRotation Reverser

#Valve Gear is a lot more complex than the main set of rods, so they will require a lot more manual editing than the base e2. 
#Finished
#Edited By AZ2933
#Helped by Nebula

if(first()|duped()){

    function number cosine(A, B, C){
        return acos((A^2 + B^2 - C^2) / (2*A*B))
    }
    function number ik(L1,L2,Hip:vector,End:vector,I1,I2){
        local Axis = Base:toLocalAxis(End - Hip)
        local Angle = Axis:toAngle():setRoll(-bearing(Hip, Base:toWorld(ang(90,0,0)), End))
        local Dist = min(Axis:length(), L1 + L2)
        local Quat = quat(Angle) * qRotation(vec(0,90 + cosine(Dist, L1, L2),0))
        holoAng(I1,Base:toWorld(ang(Quat:toAngle()[1],0,0)))
        holoAng(I2, holoEntity(I1):toWorld(ang(-cosine(L2, L1, Dist) + 90, 0, 0)))
        return Quat:toAngle()[1]
    }
   
}

if(first()|dupefinished()|duped()){

ReversedValveMotion = 0 # 0: Clockwise. 1: CounterClockwise.
#                             (Right)           (Left)
##############Config Stuff, no touchie#########################################################################################################################################################################################################################
PRWidth=Values[1,number]        
PWidth=Values[2,number]         
RodMat=Values[3,string]         
Wheel=Values[4,entity]          
PistonHeight=Values[5,number]   
PistonForward=Values[6,number]  
PistonAngle=Values[7,number]    
Scale=Values[8,number]          
Radius=Values[9,number]         
Base=Values[10,entity]          
PR=Values[11,entity]            
PL=Values[12,entity]               
##########################################################################################################################


RadiusRodLength=43.5
EccentricRodLength=41.25
EccentricRodWidth=0.25
EccentricRodScale=1.5

EccentricRadius=9.5    #reverse this by making it negative

ExpansionLinkForward=42.5
ExpansionLinkWidth=0
ExpansionLinkHeight=18

ValveStemToRadiusRodDistance=4

CombinationLeverLength=26
CombinationLeverScale=1.2
CombinationLeverWidth=0.3

UnionLinkLength=14.925
UnionLinkScale=1.3
UnionLinkWidth=2.5
UnionLinkParentPos=vec(0,2.25,0)


ValveStemForward=85.82
ValveStemAssemblyWidth=0
ValveStemHeight=19
ValveStemLength=24
ValveStemScale=1.2
ValveStemWidth=-0.25

ExpansionLinkDesync=8 #degrees, reverse this by making it negative
ExpansionLinkSwing=45 #degrees, reverse this by making it negative

CenterAssemblyParentPos=vec(38,0,27.98)
CenterAssemblyScale=1.2
CenterAssemblyArmLength=15
CenterAssemblyMaxAngle=12.34
CenterAssemblyStartAngle=0
CenterAssemblyInnerWidthAdjustment=-2
CenterAssemblyOuterWidthAdjustment=0

HoloParentVisibility=1 #can be scaled incrementally, and go past 1.

LubeWidth = 0                #6.25 Max
LubeBarClip = 0                 #
ComboLubeBarHeight = 0          #
LubeLinkConnectorWidth = 0      #
LubeUnionLinkLength = 0.1       #
LubeMainHeight = 0              #
LubeComboSwingAng = 0.34        #
LubeSwingStemAng = 4.8          #
LubeComboLinkLength = 0.15      #
LubeMainBottomHeight = 0        #
LubeComboThickScale = 1         #
#########################################################################################################################################################################################################################################################################################################

RRL=RadiusRodLength
ERL=EccentricRodLength
ECR=EccentricRadius
ERW=EccentricRodWidth
ERS=EccentricRodScale

ELF=ExpansionLinkForward
ELW=ExpansionLinkWidth
ELH=ExpansionLinkHeight

VSH=ValveStemHeight
VSF=ValveStemForward
VSAW=ValveStemAssemblyWidth
VSL=ValveStemLength
VSS=ValveStemScale
VSW=ValveStemWidth

VSTRRD=ValveStemToRadiusRodDistance

ULL=UnionLinkLength
ULS=UnionLinkScale
ULW=UnionLinkWidth
ULPP=UnionLinkParentPos

CLL=CombinationLeverLength
CLS=CombinationLeverScale
CLW=CombinationLeverWidth

ELD=ExpansionLinkDesync
ELS=ExpansionLinkSwing

CAPP=CenterAssemblyParentPos
CAS=CenterAssemblyScale
CAAL=CenterAssemblyArmLength
CAMA=CenterAssemblyMaxAngle
CASA=CenterAssemblyStartAngle
CAIW=CenterAssemblyInnerWidthAdjustment
CAOW=CenterAssemblyOuterWidthAdjustment


HPV=HoloParentVisibility


#LW = LubeWidth
LBC = LubeBarClip
CLBH = ComboLubeBarHeight
LLCW = LubeLinkConnectorWidth
LMH = LubeMainHeight
LCSA = LubeComboSwingAng
LSSA = LubeSwingStemAng
LMBH = LubeMainBottomHeight
#########################################################################################################################################################################################################################################################################################################

#valve stem left
holoCreate(1,Base:toWorld(vec(VSF,PRWidth+4+VSAW,VSH)),vec(0.2*HPV),Base:toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(1,Base)
#combination lever left
holoCreate(2,holoEntity(1):toWorld(vec(0,CLW,0)),vec(0.2*HPV),holoEntity(1):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(2,holoEntity(1))
#radius rod to combo lever left
holoCreate(3,holoEntity(2):toWorld(vec(0,-CLW,VSTRRD)),vec(0.2*HPV),holoEntity(2):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(3,holoEntity(2))
#combo lever to union link left
holoCreate(4,holoEntity(2):toWorld(vec(0,-CLW,-CLL)),vec(0.2*HPV),holoEntity(2):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(4,holoEntity(2))
#union link left
holoCreate(5,PL:toWorld(ULPP),vec(0.2*HPV),PL:toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(5,PL)

#expansion link left
holoCreate(6,Base:toWorld(vec(ELF,PRWidth+4+ELW,ELH)),vec(0.2*HPV),Base:toWorld(ang(ExLinkAngL,0,0)),vec4(255,255,255,255))
holoParent(6,Base)          #radius of eccentric holo is 72; scale = distance from valve stem / 72

ExLinkAngL = elevation(holoEntity(3):pos(),Base:angles(),holoEntity(6):pos()) 

holoCreate(7,holoEntity(6):toWorld(vec(RRL,0,0)),vec(0.2*HPV),holoEntity(6):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(7,holoEntity(6)) 
#radius rod
holoCreate(8,holoEntity(7):toWorld(vec(-RRL,0,0)),vec(0.2*HPV),holoEntity(7):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(8,holoEntity(7)) 

holoCreate(9,holoEntity(6):toWorld(vec(-7.25*(RRL/72),0,-23.5*(RRL/72))),vec(0.2*HPV),holoEntity(6):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(9,holoEntity(6)) 

#eccentric Crank left
holoCreate(10,Wheel:toWorld(vec(ECR,PRWidth+4,0)),vec(0.2*HPV),Wheel:toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(10,Wheel) #cranck dat soulja!!!!!!!



#valve stem right
holoCreate(11,Base:toWorld(vec(VSF,-PRWidth-4-VSAW,VSH)),vec(0.2*HPV),Base:toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(11,Base)
#combination lever right
holoCreate(12,holoEntity(11):toWorld(vec(0,-CLW,0)),vec(0.2*HPV),holoEntity(11):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(12,holoEntity(11))
#radius rod to combo lever right
holoCreate(13,holoEntity(12):toWorld(vec(0,CLW,VSTRRD)),vec(0.2*HPV),holoEntity(12):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(13,holoEntity(12))
#combo lever to union link right
holoCreate(14,holoEntity(12):toWorld(vec(0,CLW,-CLL)),vec(0.2*HPV),holoEntity(12):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(14,holoEntity(12))
#union link right
holoCreate(15,PR:toWorld(ULPP*vec(1,-1,1)),vec(0.2*HPV),PR:toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(15,PR)
#expansion link right
holoCreate(16,Base:toWorld(vec(ELF,-PRWidth-4-ELW,ELH)),vec(0.2*HPV),Base:toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(16,Base)          #radius of eccentric holo is 72; scale = distance from valve stem / 72

ExLinkAngR = elevation(holoEntity(13):pos(),Base:angles(),holoEntity(16):pos()) 


holoCreate(17,holoEntity(16):toWorld(vec(RRL,0,0)),vec(0.2*HPV),holoEntity(16):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(17,holoEntity(16)) 
#radius rod
holoCreate(18,holoEntity(17):toWorld(vec(-RRL,0,0)),vec(0.2*HPV),holoEntity(17):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(18,holoEntity(17)) 

holoCreate(19,holoEntity(16):toWorld(vec(-7.25*(RRL/72),0,-23.5*(RRL/72))),vec(0.2*HPV),holoEntity(16):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(19,holoEntity(16)) 

#eccentric Crank right
holoCreate(20,Wheel:toWorld(vec(0,-PRWidth-4,-ECR)),vec(0.2*HPV),Wheel:toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(20,Wheel) #cranck dat soulja!!!!!!!
RevMain=holoEntity(20)

#reverser center
holoCreate(0,Base:toWorld(CAPP),vec(0.2*HPV),Base:toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(0,Base) #reverse reverse! cha cha real smooth!
#reverser left (where did it leave to?)
holoCreate(21,holoEntity(0):toWorld(vec(CAAL,PRWidth+4+CAOW,0)),vec(0.2*HPV),holoEntity(0):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(21,holoEntity(0))

holoCreate(22,holoEntity(8):toWorld(vec(8.5*RRL/35,0,0)),vec(0.2*HPV),holoEntity(8):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(22,holoEntity(8))

#reverser right
holoCreate(23,holoEntity(0):toWorld(vec(CAAL,-PRWidth-4-CAOW,0)),vec(0.2*HPV),holoEntity(0):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(23,holoEntity(0))

holoCreate(24,holoEntity(18):toWorld(vec(8.5*RRL/35,0,0)),vec(0.2*HPV),holoEntity(18):toWorld(ang(0,0,0)),vec4(255,255,255,255))
holoParent(24,holoEntity(18))

H=100

#Expansion Link Left
H++
holoCreate(H,holoEntity(6):toWorld(vec(0,0,0)),vec(RRL/72),holoEntity(6):toWorld(ang(0,-90,0)),vec4(255,255,255,255))
holoParent(H,holoEntity(6))                         #scale equals distance in inches from combo lever divided by 72
holoModel(H,"models/zexciv_train_stuff/details/expansionlink.mdl")
holoEntity(H):setSubMaterial(2,RodMat)

#Expansion Link Right
H++
holoCreate(H,holoEntity(16):toWorld(vec(0,0,0)),vec(RRL/72),holoEntity(16):toWorld(ang(0,-90,0)),vec4(255,255,255,255))
holoParent(H,holoEntity(16))                         #scale equals distance in inches from combo lever divided by 72
holoModel(H,"models/zexciv_train_stuff/details/expansionlink.mdl")
holoEntity(H):setSubMaterial(2,RodMat)



#Eccentric Crank Left
H++
holoCreate(H,Wheel:toWorld(vec(0,PRWidth+3,-Radius)),vec(sqrt(Radius^2+ECR^2)/18),Wheel:toWorld(ang(0,90,atan(ECR/Radius))),vec4(255,255,255,255))
holoParent(H,Wheel)      
holoModel(H,"models/anytrains/rods/eccentriccrank2.mdl")
holoEntity(H):setSubMaterial(1,RodMat)

H++
holoCreate(H,Wheel:toWorld(vec(0,PRWidth,-Radius)),vec(0.9,0.9,0.7),Wheel:toWorld(ang(0,0,90)),vec4(255,255,255,255))
holoParent(H,Wheel)      
holoModel(H,"models/sprops/cylinders/size_3/cylinder_6x12.mdl")
holoEntity(H):setSubMaterial(1,RodMat)

#Eccentric Crank Right
H++
holoCreate(H,Wheel:toWorld(vec(-Radius,-PRWidth-3,0)),vec(sqrt(Radius^2+ECR^2)/18),Wheel:toWorld(ang(0,-90,-90-atan(ECR/Radius))),vec4(255,255,255,255))
holoParent(H,Wheel)      
holoModel(H,"models/anytrains/rods/eccentriccrank2.mdl")
holoEntity(H):setSubMaterial(1,RodMat)

H++
holoCreate(H,Wheel:toWorld(vec(-Radius,-PRWidth,0)),vec(0.9,0.9,0.7),Wheel:toWorld(ang(0,0,90)),vec4(255,255,255,255))
holoParent(H,Wheel)      
holoModel(H,"models/sprops/cylinders/size_3/cylinder_6x12.mdl")
holoEntity(H):setSubMaterial(1,RodMat)


local P2MExpLinkL = p2mCreate(1,holoEntity(9):pos(), holoEntity(9):angles())

P2MExpLinkL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,1.55+ERW,0),ang(0,0,90),vec(0.67,0.67,0.75)*ERS,0,0,0)
P2MExpLinkL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",(vec(0,1.55+ERW,0)+vec(0,0.15,0*ERS)),ang(0,0,90),vec(0.5,0.5,0.92)*ERS,0,0,0)
P2MExpLinkL:p2mPushModel(1,"models/sprops/rectangles/size_1/rect_3x3x3.mdl",(vec(0,1.55+ERW,0)+vec(0,0.15,1.3)*ERS),ang(0,0,90),vec(0.3)*ERS,0,0,0)

P2MExpLinkL:p2mBuild()
P2MExpLinkL:parentTo(holoEntity(9))
P2MExpLinkL:p2mSetMaterial(1,RodMat)
P2MExpLinkL:p2mSetUV(1,35)


local P2MEccRodL = p2mCreate(1,holoEntity(10):pos(), holoEntity(10):angles())

P2MEccRodL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,1.55+ERW,0),ang(0,0,90),vec(0.67,0.67,0.75)*ERS,0,0,0)
P2MEccRodL:p2mPushModel(1,"models/sprops/rectangles/size_1/rect_3x30x3.mdl",(vec(ERL/2,1.55+ERW,0)+vec(0,0.15,0)*ERS),ang(0,0,90),vec(ERL/30,0.45*ERS,0.45*ERS),0,0,0)
P2MEccRodL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",(vec(0,1.55+ERW,0)+vec(0,0.15,0)*ERS),ang(0,0,90),vec(0.5,0.5,0.92)*ERS,0,0,0)
P2MEccRodL:p2mPushModel(1,"models/sprops/rectangles/size_1/rect_3x3x3.mdl",(vec(0,1.55+ERW,0)+vec(0,0.15,1.3)*ERS),ang(0,0,90),vec(0.3)*ERS,0,0,0)

P2MEccRodL:p2mBuild()
P2MEccRodL:parentTo(holoEntity(10))
P2MEccRodL:p2mSetMaterial(1,RodMat)
P2MEccRodL:p2mSetUV(1,35)


local P2MRadRodL = p2mCreate(1,holoEntity(8):pos(), holoEntity(8):angles())

P2MRadRodL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,0,0),ang(0,0,90),vec(1,1,0.87),0,0,0)
P2MRadRodL:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x6x1_5.mdl",vec(3,0.9,0),ang(0,0,90),vec(1,0.35,0.5),0,0,0)
P2MRadRodL:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x6x1_5.mdl",vec(3,-0.9,0),ang(0,0,90),vec(1,0.35,0.5),0,0,0)
P2MRadRodL:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x30x1_5.mdl",vec(20,0,0),ang(0,0,0),vec(30/30,0.4,0.7),0,0,0)
P2MRadRodL:p2mPushModel(1,"models/sprops/triangles_thin/right/size_0/t_rtri_3x6.mdl",vec(9,0.9,0),ang(0,0,-90),vec(1,0.7,0.25),0,0,0)
P2MRadRodL:p2mPushModel(1,"models/sprops/triangles_thin/right/size_0/t_rtri_3x6.mdl",vec(9,-0.9,0),ang(0,0,90),vec(1,0.7,0.25),0,0,0)

P2MRadRodL:p2mBuild()
P2MRadRodL:parentTo(holoEntity(8))
P2MRadRodL:p2mSetMaterial(1,RodMat)
P2MRadRodL:p2mSetUV(1,35)
P2MRadRodL:p2mSetScale(1,vec(RRL/35))

local P2MRadRod2L = p2mCreate(1,holoEntity(3):pos(), holoEntity(3):angles())

P2MRadRod2L:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,0.9,0),ang(0,0,90),vec(0.5*CLS,0.5*CLS,1.4),0,0,0)

P2MRadRod2L:p2mBuild()
P2MRadRod2L:parentTo(holoEntity(3))
P2MRadRod2L:p2mSetMaterial(1,RodMat)
P2MRadRod2L:p2mSetUV(1,35)


local P2MUnLinkL = p2mCreate(1,holoEntity(5):pos(), holoEntity(5):angles())

P2MUnLinkL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,ULW,0),ang(0,0,90),vec(1,1,0.7)*ULS,0,0,0)
P2MUnLinkL:p2mPushModel(1,"models/sprops/rectangles_thin/size_0/rect_1_5x6x1_5.mdl",vec(ULL/2,ULW,0),ang(0,0,0),vec(ULL/6,0.8*ULS,0.8*ULS),0,0,0)
P2MUnLinkL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,ULW,1),ang(0,0,0),vec(0.3,0.3,0.7)*ULS,0,0,0)

P2MUnLinkL:p2mBuild()
P2MUnLinkL:parentTo(holoEntity(5))
P2MUnLinkL:p2mSetMaterial(1,RodMat)
P2MUnLinkL:p2mSetUV(1,35)


local P2MCombLevL = p2mCreate(1,holoEntity(2):pos(), holoEntity(2):angles())

P2MCombLevL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,1.6,-CLL),ang(0,0,90),vec(0.6,0.6,1)*CLS,0,0,0)
P2MCombLevL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,1.6,-CLL),ang(0,0,90),vec(0.45,0.45,1.2)*CLS,0,0,0)
P2MCombLevL:p2mPushModel(1,"models/sprops/rectangles_thin/size_0/rect_1_5x6x1_5.mdl",vec(0,1.6,(-(CLL+VSTRRD)/2)+VSTRRD),ang(90,0,0),vec((CLL+VSTRRD)/6,0.8*CLS,0.8*CLS),0,0,0)
P2MCombLevL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,1.6,VSTRRD),ang(0,0,90),vec(0.7,0.7,0.5)*CLS,0,0,0)
P2MCombLevL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,1.6,VSTRRD+1),ang(0,0,0),vec(0.25,0.25,0.5)*CLS,0,0,0)
P2MCombLevL:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,1.6,0),ang(0,0,90),vec(0.7,0.7,0.5)*CLS,0,0,0)

P2MCombLevL:p2mBuild()
P2MCombLevL:parentTo(holoEntity(2))
P2MCombLevL:p2mSetMaterial(1,RodMat)
P2MCombLevL:p2mSetUV(1,35)


local P2MVlvStmL = p2mCreate(1,holoEntity(1):pos(), holoEntity(1):angles())

P2MVlvStmL:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x12.mdl",vec(0,VSW,0)+vec(VSL/2,0,0),ang(90,0,0),vec(1*VSS,1*VSS,VSL/12),0,0,0)
P2MVlvStmL:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x6x1_5.mdl",vec(0,VSW,0)+vec(1.5,0,0)*VSS,ang(0,0,90),vec(1,0.8,1.2)*VSS,0,0,0)
P2MVlvStmL:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,VSW,0)+vec(0,1.2,0)*VSS,ang(0,0,90),vec(1,1,1)*VSS,0,0,0)
P2MVlvStmL:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,VSW,0)+vec(3.5,0,1)*VSS,ang(0,0,0),vec(0.5,0.5,0.7)*VSS,0,0,0)

P2MVlvStmL:p2mBuild()
P2MVlvStmL:parentTo(holoEntity(1))
P2MVlvStmL:p2mSetMaterial(1,RodMat)
P2MVlvStmL:p2mSetUV(1,35)


local P2MRevLinkL = p2mCreate(1,holoEntity(22):pos(), holoEntity(22):angles())

P2MRevLinkL:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,0,0),ang(0,0,90),vec(0.5,0.5,0.8),0,0,0)
P2MRevLinkL:p2mPushModel(1,"models/sprops/rectangles_thin/size_0/rect_1_5x6x1_5.mdl",vec(0,0,3.5),ang(90,0,0),vec(7/6,0.6,0.6),0,0,0)

P2MRevLinkL:p2mBuild()
P2MRevLinkL:parentTo(holoEntity(22))
P2MRevLinkL:p2mSetMaterial(1,RodMat)
P2MRevLinkL:p2mSetUV(1,35)
P2MRevLinkL:p2mSetScale(1,vec(RRL/35))

local P2MRevLink2L = p2mCreate(1,holoEntity(21):pos(), holoEntity(21):angles())

P2MRevLink2L:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,0,0),ang(0,0,90),vec(1.3,1.3,0.5)*CAS,0,0,0)

P2MRevLink2L:p2mBuild()
P2MRevLink2L:parentTo(holoEntity(21))
P2MRevLink2L:p2mSetMaterial(1,RodMat)
P2MRevLink2L:p2mSetUV(1,35)


local P2MRevCenter = p2mCreate(1,holoEntity(0):pos(), holoEntity(0):angles())

P2MRevCenter:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x60.mdl",vec(0,0,0),ang(0,0,90),vec(1*CAS,1*CAS,(((PRWidth*2)+CAIW*2)+1)/60),0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,PRWidth-0.5+CAIW,0),ang(0,0,90),vec(1.4,1.4,0.5)*CAS,0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x3x1_5.mdl",vec(-0.1*CAS,PRWidth-0.5+CAIW,0),ang(0,0,90),vec(1,0.4,0.6)*CAS,0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/geometry/fhex_12.mdl",vec(-1.2*CAS,PRWidth-0.5+CAIW,0),ang(0,0,90),vec(0.05,0.6,0.05)*CAS,0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/rectangles_thin/size_0/rect_1_5x12x1_5.mdl",vec(CAAL/2,PRWidth-0.5+CAIW,0),ang(0,0,90),vec(CAAL/12,1.4*CAS,1*CAS),0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(CAAL,PRWidth-0.5+CAIW,0),ang(0,0,90),vec(1.4,1.4,0.5)*CAS,0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x6.mdl",vec(CAAL,PRWidth+2+(CAIW+CAOW)/2,0),ang(0,0,90),vec(1*CAS,1*CAS,(6-CAIW+CAOW)/6),0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/geometry/fhex_12.mdl",vec(CAAL-1,PRWidth-0.5+CAIW,0),ang(0,0,90),vec(0.065,0.9,0.065)*CAS,0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,-PRWidth+0.5-CAIW,0),ang(0,0,90),vec(1.4,1.4,0.5)*CAS,0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x3x1_5.mdl",vec(-0.1,-PRWidth+0.5-CAIW,0),ang(0,0,90),vec(1,0.4,0.6)*CAS,0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/geometry/fhex_12.mdl",vec(-1.2,-PRWidth+0.5-CAIW,0),ang(0,0,90),vec(0.05,0.6,0.05)*CAS,0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/rectangles_thin/size_0/rect_1_5x12x1_5.mdl",vec(CAAL/2,-PRWidth+0.5-CAIW,0),ang(0,0,90),vec(CAAL/12,1.4*CAS,1*CAS),0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(CAAL,-PRWidth+0.5-CAIW,0),ang(0,0,90),vec(1.4*CAS,1.4*CAS,0.5*CAS),0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x6.mdl",vec(CAAL,-PRWidth-2-(CAIW+CAOW)/2,0),ang(0,0,90),vec(1*CAS,1*CAS,(6-CAIW+CAOW)/6),0,0,0)
P2MRevCenter:p2mPushModel(1,"models/sprops/geometry/fhex_12.mdl",vec(CAAL-1,-PRWidth+0.5-CAIW,0),ang(0,0,90),vec(0.065,0.9,0.065)*CAS,0,0,0)

P2MRevCenter:p2mBuild()
P2MRevCenter:parentTo(holoEntity(0))
P2MRevCenter:p2mSetMaterial(1,RodMat)
P2MRevCenter:p2mSetUV(1,35)

#right
local P2MExpLinkR = p2mCreate(1,holoEntity(19):pos(), holoEntity(19):angles())

P2MExpLinkR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-1.55-ERW,0),ang(0,0,90),vec(0.67,0.67,0.75)*ERS,0,0,0)
P2MExpLinkR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",(vec(0,-1.55-ERW,0)+vec(0,-0.15,0*ERS)),ang(0,0,90),vec(0.5,0.5,0.92)*ERS,0,0,0)
P2MExpLinkR:p2mPushModel(1,"models/sprops/rectangles/size_1/rect_3x3x3.mdl",(vec(0,-1.55-ERW,0)+vec(0,-0.15,1.3)*ERS),ang(0,0,90),vec(0.3)*ERS,0,0,0)


P2MExpLinkR:p2mBuild()
P2MExpLinkR:parentTo(holoEntity(19))
P2MExpLinkR:p2mSetMaterial(1,RodMat)
P2MExpLinkR:p2mSetUV(1,35)


local P2MEccRodR = p2mCreate(1,holoEntity(20):pos(), holoEntity(20):angles())

P2MEccRodR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-1.55-ERW,0),ang(0,0,90),vec(0.67,0.67,0.75)*ERS,0,0,0)
P2MEccRodR:p2mPushModel(1,"models/sprops/rectangles/size_1/rect_3x30x3.mdl",(vec(ERL/2,-1.55-ERW,0)+vec(0,-0.15,0)*ERS),ang(0,0,90),vec(ERL/30,0.45*ERS,0.45*ERS),0,0,0)
P2MEccRodR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",(vec(0,-1.55-ERW,0)+vec(0,-0.15,0)*ERS),ang(0,0,90),vec(0.5,0.5,0.92)*ERS,0,0,0)
P2MEccRodR:p2mPushModel(1,"models/sprops/rectangles/size_1/rect_3x3x3.mdl",(vec(0,-1.55-ERW,0)+vec(0,-0.15,1.3)*ERS),ang(0,0,90),vec(0.3)*ERS,0,0,0)


P2MEccRodR:p2mBuild()
P2MEccRodR:parentTo(holoEntity(20))
P2MEccRodR:p2mSetMaterial(1,RodMat)
P2MEccRodR:p2mSetUV(1,35)


local P2MRadRodR = p2mCreate(1,holoEntity(18):pos(), holoEntity(18):angles())

P2MRadRodR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,0,0),ang(0,0,90),vec(1,1,0.87),0,0,0)
P2MRadRodR:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x6x1_5.mdl",vec(3,0.9,0),ang(0,0,90),vec(1,0.35,0.5),0,0,0)
P2MRadRodR:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x6x1_5.mdl",vec(3,-0.9,0),ang(0,0,90),vec(1,0.35,0.5),0,0,0)
P2MRadRodR:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x30x1_5.mdl",vec(20,0,0),ang(0,0,0),vec(30/30,0.4,0.7),0,0,0)
P2MRadRodR:p2mPushModel(1,"models/sprops/triangles_thin/right/size_0/t_rtri_3x6.mdl",vec(9,0.9,0),ang(0,0,-90),vec(1,0.7,0.25),0,0,0)
P2MRadRodR:p2mPushModel(1,"models/sprops/triangles_thin/right/size_0/t_rtri_3x6.mdl",vec(9,-0.9,0),ang(0,0,90),vec(1,0.7,0.25),0,0,0)

P2MRadRodR:p2mBuild()
P2MRadRodR:parentTo(holoEntity(18))
P2MRadRodR:p2mSetMaterial(1,RodMat)
P2MRadRodR:p2mSetUV(1,35)
P2MRadRodR:p2mSetScale(1,vec(RRL/35))

local P2MRadRod2R = p2mCreate(1,holoEntity(13):pos(), holoEntity(13):angles())

P2MRadRod2R:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-0.9,0),ang(0,0,90),vec(0.5*CLS,0.5*CLS,1.4),0,0,0)

P2MRadRod2R:p2mBuild()
P2MRadRod2R:parentTo(holoEntity(13))
P2MRadRod2R:p2mSetMaterial(1,RodMat)
P2MRadRod2R:p2mSetUV(1,35)


local P2MUnLinkR = p2mCreate(1,holoEntity(15):pos(), holoEntity(15):angles())

P2MUnLinkR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-ULW,0),ang(0,0,90),vec(1,1,0.7)*ULS,0,0,0)
P2MUnLinkR:p2mPushModel(1,"models/sprops/rectangles_thin/size_0/rect_1_5x6x1_5.mdl",vec(ULL/2,-ULW,0),ang(0,0,0),vec(ULL/6,0.8*ULS,0.8*ULS),0,0,0)
P2MUnLinkR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-ULW,1),ang(0,0,0),vec(0.3,0.3,0.7)*ULS,0,0,0)


P2MUnLinkR:p2mBuild()
P2MUnLinkR:parentTo(holoEntity(15))
P2MUnLinkR:p2mSetMaterial(1,RodMat)
P2MUnLinkR:p2mSetUV(1,35)


local P2MCombLevR = p2mCreate(1,holoEntity(12):pos(), holoEntity(12):angles())


P2MCombLevR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-1.6,-CLL),ang(0,0,90),vec(0.6,0.6,1)*CLS,0,0,0)
P2MCombLevR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-1.6,-CLL),ang(0,0,90),vec(0.45,0.45,1.2)*CLS,0,0,0)
P2MCombLevR:p2mPushModel(1,"models/sprops/rectangles_thin/size_0/rect_1_5x6x1_5.mdl",vec(0,-1.6,(-(CLL+VSTRRD)/2)+VSTRRD),ang(90,0,0),vec((CLL+VSTRRD)/6,0.8*CLS,0.8*CLS),0,0,0)
P2MCombLevR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-1.6,VSTRRD),ang(0,0,90),vec(0.7,0.7,0.5)*CLS,0,0,0)
P2MCombLevR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-1.6,VSTRRD+1),ang(0,0,0),vec(0.25,0.25,0.5)*CLS,0,0,0)
P2MCombLevR:p2mPushModel(1,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,-1.6,0),ang(0,0,90),vec(0.7,0.7,0.5)*CLS,0,0,0)

P2MCombLevR:p2mBuild()
P2MCombLevR:parentTo(holoEntity(12))
P2MCombLevR:p2mSetMaterial(1,RodMat)
P2MCombLevR:p2mSetUV(1,35)


local P2MVlvStmR = p2mCreate(1,holoEntity(11):pos(), holoEntity(11):angles())

P2MVlvStmR:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x12.mdl",vec(0,-VSW,0)+vec(VSL/2,0,0),ang(90,0,0),vec(1*VSS,1*VSS,VSL/12),0,0,0)
P2MVlvStmR:p2mPushModel(1,"models/sprops/rectangles_thin/size_1/rect_3x6x1_5.mdl",vec(0,-VSW,0)+vec(1.5,0,0)*VSS,ang(0,0,90),vec(1,0.8,1.2)*VSS,0,0,0)
P2MVlvStmR:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,-VSW,0)+vec(0,-1.2,0)*VSS,ang(0,0,90),vec(1,1,1)*VSS,0,0,0)
P2MVlvStmR:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,-VSW,0)+vec(3.5,0,1)*VSS,ang(0,0,0),vec(0.5,0.5,0.7)*VSS,0,0,0)


P2MVlvStmR:p2mBuild()
P2MVlvStmR:parentTo(holoEntity(11))
P2MVlvStmR:p2mSetMaterial(1,RodMat)
P2MVlvStmR:p2mSetUV(1,35)


local P2MRevLinkR = p2mCreate(1,holoEntity(24):pos(), holoEntity(24):angles())

P2MRevLinkR:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,0,0),ang(0,0,90),vec(0.5,0.5,0.8),0,0,0)
P2MRevLinkR:p2mPushModel(1,"models/sprops/rectangles_thin/size_0/rect_1_5x6x1_5.mdl",vec(0,0,3.5),ang(90,0,0),vec(7/6,0.6,0.6),0,0,0)

P2MRevLinkR:p2mBuild()
P2MRevLinkR:parentTo(holoEntity(24))
P2MRevLinkR:p2mSetMaterial(1,RodMat)
P2MRevLinkR:p2mSetUV(1,35)
P2MRevLinkR:p2mSetScale(1,vec(RRL/35))


local P2MRevLink2R = p2mCreate(1,holoEntity(23):pos(), holoEntity(23):angles())

P2MRevLink2R:p2mPushModel(1,"models/sprops/cylinders/size_1/cylinder_1_5x3.mdl",vec(0,0,0),ang(0,0,90),vec(1.3,1.3,0.5)*CAS,0,0,0)

P2MRevLink2R:p2mBuild()
P2MRevLink2R:parentTo(holoEntity(23))
P2MRevLink2R:p2mSetMaterial(1,RodMat)
P2MRevLink2R:p2mSetUV(1,35)
 
#   
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
    #
    
    LubeMat = "models/proppertextures/acrylic" #"models/proppertextures/acrylic"
    LubricatorModel = "models/infra/props_machinery/gearbox_001.mdl"
    LubeValveModel = "models/props_bennjo/valve_3.mdl"
    
    #
    #Entire Lubricator Combo Parent
    E = holoEntity(2)
    A = 25
    Pos = vec(0,1.64,-4+CLBH),Size = vec(0.25),Ang = ang(0,0,0),Color = vec(255),Model = "cube"
    holoCreate(A,E:toWorld(Pos),Size,E:toWorld(Ang),Color,Model)
    holoParent(A,E)
    holoBodygroup(A,0,0)
    holoClipEnabled(A,1,1)
    holoClip(A,1,vec(0,0,0),vec(0,0,0),0)
    holoMaterial(A,"")
    holoAlpha(A,0)
    
    #Main Lube Connector Parent
    A = 26
    Pos = vec(0,1.64+LubeWidth,-4+CLBH),Size = vec(0.2*HPV),Ang = ang(0,0,0),Color = vec(255),Model = "cube"
    holoCreate(A,E:toWorld(Pos),Size,E:toWorld(Ang),Color,Model)
    holoParent(A,E)
    holoBodygroup(A,0,0)
    holoClipEnabled(A,1,1)
    holoClip(A,1,vec(0,0,0),vec(0,0,0),0)
    holoMaterial(A,"")
    holoAlpha(A,0)
    
    #Lube Connecter Parent
    E = holoEntity(26)
    A = 27
    Pos = vec(0,2.15+LubeWidth+LLCW,0),Size = vec(0.2*HPV),Ang = ang(0,0,0),Color = vec(255),Model = "cube"
    holoCreate(A,E:toWorld(Pos),Size,E:toWorld(Ang),Color,Model)
    holoParent(A,E)
    holoBodygroup(A,0,0)
    holoClipEnabled(A,1,1)
    holoClip(A,1,vec(0,0,0),vec(0,0,0),0)
    holoEntity(A):setSubMaterial(1,"")
    holoMaterial(A,"")
    holoAlpha(A,190)
    
    #Lube Main Point
    E = Base
    A = 28
    Pos = vec(100,32.52+(LubeWidth*2)+LLCW,26.9+LMH),Size = vec(0.2*HPV),Ang = ang(0,0,0),Color = vec(63),Model = "cube"
    holoCreate(A,E:toWorld(Pos),Size,E:toWorld(Ang),Color,Model)
    holoParent(A,E)
    holoBodygroup(A,0,0)
    holoClipEnabled(A,1,1)
    holoClip(A,1,vec(0,0,0),vec(0,0,0),0)
    holoEntity(A):setSubMaterial(1,"")
    holoMaterial(A,"")
    holoAlpha(A,127)
    
    #Lube Main Bottom Point
    E = holoEntity(28)
    A = 29
    Pos = vec(0,0,-12.15-LMBH),Size = vec(0.2*HPV),Ang = ang(0,0,0),Color = vec(127),Model = "cube"
    holoCreate(A,E:toWorld(Pos),Size,E:toWorld(Ang),Color,Model)
    holoParent(A,E)
    holoBodygroup(A,0,0)
    holoClipEnabled(A,1,1)
    holoClip(A,1,vec(0,0,0),vec(0,0,0),0)
    holoEntity(A):setSubMaterial(1,"")
    holoMaterial(A,"")
    holoAlpha(A,127)
    
    #
    E = holoEntity(28)
    A = 30
    Pos = vec(0,5.593,0),Size = vec(1),Ang = ang(0,0,-90),Color = vec(255),Model = "models/props_bennjo/valve_3.mdl"
    holoCreate(A,E:toWorld(Pos),Size,E:toWorld(Ang),Color,Model)
    holoParent(A,E)
    holoBodygroup(A,0,0)
    holoClipEnabled(A,1,1)
    holoClip(A,1,vec(0,0,0),vec(0,0,0),0)
    holoEntity(A):setSubMaterial(1,"")
    holoMaterial(A,"")
    holoAlpha(A,255)
    
    #
    A = 1
    MeshEntity = 2
    local Test1 = p2mCreate(A,holoEntity(MeshEntity):pos(), holoEntity(MeshEntity):angles())

    Test1:p2mPushModel(A,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,1.64,-4+CLBH),ang(0,0,90),vec(0.7,0.7,0.5)*CLS) #Big

    Test1:p2mBuild()
    Test1:parentTo(holoEntity(MeshEntity))
    
    #
    A = 2
    MeshEntity = 25
    local Test2 = p2mCreate(A,holoEntity(MeshEntity):pos(), holoEntity(MeshEntity):angles())

    Test2:p2mPushModel(A,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,0,0),ang(0,0,90),vec(0.5,0.5,0.602)*CLS) #Small

    Test2:p2mPushModel(A,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,2.15+LubeWidth,0),ang(0,0,90),vec(0.5,0.5,0.602+(LubeWidth*0.554))*CLS,0,0, #Big
    array(vec(0,0,7.35-LBC),vec(0,0,-1)))
    
    Test2:p2mPushModel(A,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,3.41+(1.998*LubeWidth),0),ang(0,0,90),vec(0.6,0.6,0.1)*CLS,0,0, #Small
    array(vec(0,0,7.35-LBC),vec(0,0,-1)))
    
    Test2:p2mBuild()
    Test2:parentTo(holoEntity(MeshEntity))
    
    #
    A = 4
    MeshEntity = 27
    local Test3 = p2mCreate(A,holoEntity(MeshEntity):pos(), holoEntity(MeshEntity):angles())

    Test3:p2mPushModel(A,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,0,0),ang(0,0,90),vec(0.7,0.7,0.602)*CLS) #Big

    Test3:p2mPushModel(A,"models/sprops/rectangles_thin/size_0/rect_1_5x18x1_5.mdl",vec(7.08,0,0),ang(0,0,0),vec(0.785+(1*LubeUnionLinkLength),1,1),0,0,
    array(vec(-7.1,0,0),vec(1,0,0)))
    
    Test3:p2mBuild()
    Test3:parentTo(holoEntity(MeshEntity))
    
    #
    A = 6
    MeshEntity = 29
    local Test4 = p2mCreate(A,holoEntity(MeshEntity):pos(), holoEntity(MeshEntity):angles())

    Test4:p2mPushModel(A,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,0,0),ang(0,0,90),vec(0.7,0.7,0.6)*CLS)

    Test4:p2mBuild()
    Test4:parentTo(holoEntity(MeshEntity))
    
    #
    A = 7
    MeshEntity = 28
    local Test5 = p2mCreate(A,holoEntity(MeshEntity):pos(), holoEntity(MeshEntity):angles())

    Test5:p2mPushModel(A,"models/sprops/rectangles_thin/size_0/rect_1_5x18x1_5.mdl",vec(0,0,-5.45),ang(90,0,0),vec(0.5+(1*LubeComboLinkLength),(1*LubeComboThickScale)*CLS,(1*LubeComboThickScale)*CLS)
    ,0,0,array(vec(-5.5,0,0),vec(1,0,0)))
    Test5:p2mPushModel(A,"models/sprops/cylinders/size_2/cylinder_3x3.mdl",vec(0,0,0),ang(0,0,90),vec(0.7,0.7,0.602)*CLS) #Big

    Test5:p2mBuild()
    Test5:parentTo(holoEntity(MeshEntity))
    
    #
    #Materials
    
    Test1:p2mSetMaterial(1,LubeMat)
    Test2:p2mSetMaterial(2,LubeMat)
    #LubeBarStretcher:p2mSetMaterial(3,LubeMat)
    Test3:p2mSetMaterial(4,LubeMat)
    #LubeUnionStretcher:p2mSetMaterial(5,LubeMat)
    Test4:p2mSetMaterial(6,LubeMat)
    Test5:p2mSetMaterial(7,LubeMat)
    
#[
    E = holoEntity(0)
    A = 0
    Pos = vec(0,0,0),Size = vec(1),Ang = ang(0,0,0),Color = vec(255),Model = "cube"
    holoCreate(A,E:toWorld(Pos),Size,E:toWorld(Ang),Color,Model)
    holoParent(A,E)
    holoBodygroup(A,0,0)
    holoClipEnabled(A,1,1)
    holoClip(A,1,vec(0,0,0),vec(0,0,0),0)
    holoEntity(A):setSubMaterial(1,"")
    holoMaterial(A,"")
    holoAlpha(A,255)
    
    A = 1
    MeshEntity = 0
    local Test = p2mCreate(A,holoEntity(MeshEntity):pos(), holoEntity(MeshEntity):angles())

    Test:p2mPushModel(A,"",vec(0,0,0),ang(0,0,0),vec(1))

    Test:p2mBuild()
    Test:parentTo(holoEntity(MeshEntity))
    Test:p2mSetMaterial(A,"")
    
]#
}
#
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

Aaa=(PistonForward-sqrt((PistonForward^2)-(Radius^2)))
PMoveR=(-cos(WheelRotation)*Radius)-(Aaa*abs(sin(WheelRotation)))
PMoveL=(-sin(WheelRotation)*Radius)-(Aaa*abs(cos(WheelRotation)))


EccRAngL=(-Reverser*7)+(abs(Reverser)*(1-Reverser)*sin(abs(EccAngL/20)*15))
EccAngL=-cos(WheelRotation+ELD)*ELS
ComboAngL=-atan(PMoveL/(CLL+VSTRRD))+(EccAngL*3.9/20*-Reverser)
                    #divide PMove by the length in inches of the combination lever
ValveStmL=(-sin(ComboAngL)*VSTRRD)+(EccAngL*1.45*RRL/35/20*-Reverser)
                          # multiply sin(ComboAng) by the distance in inches 
                          # the valve stem is above or below the rotation
                          # point of the combination lever

EccRAngR=(-Reverser*7)+(abs(Reverser)*(1-Reverser)*sin(abs(EccAngR/20)*15))
EccAngR=sin(WheelRotation+ELD)*ELS
ComboAngR=-atan(PMoveR/(CLL+VSTRRD))+(EccAngR*3.9/20*-Reverser)
                    #divide PMove by the length in inches of the combination lever
ValveStmR=(-sin(ComboAngR)*VSTRRD)+(EccAngR*1.45*RRL/35/20*-Reverser)
                          # multiply sin(ComboAng) by the distance in inches 
                          # the valve stem is above or below the rotation
                          # point of the combination lever

LubeSwing = (ComboAngL*LCSA)-ValveStmL*LSSA

if(ValveMotion >= -15)
{
    ValveSpin++
}
#if(ValveSpin >= 20)
#{
#    HeadlightCRTL_C = 40
#}

ValveMul=+(ValveSpin-ValveMul)/12

ValveMotion = round(-LubeSwing)

if(ValveMotion == 12){
    AngleTest = 1
}elseif(ValveMotion == -12){
    AngleTest = 0
}
if(ValveMotion == -12){
    AngleTest2 = 1
}elseif(ValveMotion == 12){
    AngleTest2 = 0
}

#if(ValveMotion <= -11){
#    AngleTest = 1
#}elseif(ValveMotion == -1){
#    AngleTest = 0
#}

holoPos(1,Base:toWorld(vec(ValveStmL,0,0)+vec(VSF,PRWidth+4+VSAW,VSH)))
holoAng(2,holoEntity(1):toWorld(ang(ComboAngL,0,0)))
holoAng(6,Base:toWorld(ang(EccAngL+0,0,0)+ang(ExLinkAngL,0,0)))
holoAng(7,holoEntity(6):toWorld(ang(EccRAngL+0,0,0)))

holoPos(11,Base:toWorld(vec(ValveStmR,0,0)+vec(VSF,-PRWidth-4-VSAW,VSH)))
holoAng(12,holoEntity(11):toWorld(ang(ComboAngR,0,0)))
holoAng(16,Base:toWorld(ang(EccAngR+0,0,0)+ang(ExLinkAngR,0,0)))
holoAng(17,holoEntity(16):toWorld(ang(EccRAngR+0,0,0)))

holoAng(0,Base:toWorld(ang((Reverser*CAMA)-CASA,0,0)))

local UnionAngL = elevation(holoEntity(4):pos(),Base:angles(),holoEntity(5):pos()) 
holoAng(5,Base:toWorld(ang(UnionAngL,0,0)))

local EccRodAngL = elevation(holoEntity(9):pos(),Wheel:angles(),holoEntity(10):pos()) 
holoAng(10,Base:toWorld(ang(EccRodAngL,0,0)))
holoAng(9,Base:toWorld(ang(EccRodAngL,0,0)))

local RadRodAngL = elevation(holoEntity(8):pos(),Base:angles(),holoEntity(3):pos()) 
holoAng(8,Base:toWorld(ang(-RadRodAngL,0,0)))
holoAng(3,Base:toWorld(ang(-RadRodAngL,0,0)))

local RevLinkL = elevation(holoEntity(21):pos(),Base:toWorld(ang(90,0,0)),holoEntity(22):pos()) 
holoAng(21,Base:toWorld(ang(-RevLinkL,0,0)))
holoAng(22,Base:toWorld(ang(-RevLinkL,0,0)))


local UnionAngR = elevation(holoEntity(14):pos(),Base:angles(),holoEntity(15):pos()) 
holoAng(15,Base:toWorld(ang(UnionAngR,0,0)))

local EccRodAngR = elevation(holoEntity(19):pos(),Wheel:angles(),holoEntity(20):pos()) 
holoAng(20,Base:toWorld(ang(EccRodAngR,0,0)))
holoAng(19,Base:toWorld(ang(EccRodAngR,0,0)))

local RadRodAngR = elevation(holoEntity(18):pos(),Base:angles(),holoEntity(13):pos()) 
holoAng(18,Base:toWorld(ang(-RadRodAngR,0,0)))
holoAng(13,Base:toWorld(ang(-RadRodAngR,0,0)))

local RevLinkR = elevation(holoEntity(23):pos(),Base:toWorld(ang(90,0,0)),holoEntity(24):pos()) 
holoAng(23,Base:toWorld(ang(-RevLinkR,0,0)))
holoAng(24,Base:toWorld(ang(-RevLinkR,0,0)))

local VM = ik(12,14,holoEntity(28):pos(),holoEntity(27):pos(),28,27)
#Length of rod 1, Length of rod 2, 'Start Pos', 'End Pos', Rod 1 holo ID, Rod 2 holo ID.

#if((VM<-1&VM>-15) & !ValveMov){ValveMov=1}elseif((VM<-15)&ValveMov){ValveMov=0 Swing=0} if(VM>=21){Swing=1}

if(VM != LastVAngChange){LC = VM-LastVAngChange ,  LastVAngChange = VM}

ValveMov = (LC >= 0 & ReversedValveMotion | LC <= 0 & !ReversedValveMotion)

ValveAng -= LC*(ValveMov)

holoAng(30,Base:toWorld(ang(ValveAng,180,90)))

#MainAng = 29
#local ComboToLubAng3 = elevation(holoEntity(27):pos(),Base:angles(),holoEntity(MainAng):pos()) 
#holoAng(MainAng,Base:toWorld(ang(ComboToLubAng3,0,0)))

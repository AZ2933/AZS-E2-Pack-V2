@name Realistic Steam Locomotive Control Definitive Edition [V1.6.1]
@inputs Ignite Damper AddCoal AddWater Drivers:array [Pod Plow FireEnt CompressorEnt StackEnt]:entity EmBrake Trucks:array SaftiesAF Cylinder_Drains #OilAtomizing:string
@outputs Active Warmup BrakeInfo:array MPH KPH V Reverser R8 Throttle Brake Coal Water Steam Temp Cocks DrainValve Firebox:vector
@outputs CPU CONSTANT OM LBQ IHQ THQ ABQ Force BrakingForce BrakingMul
@outputs Emergency AB16M_Notch LB16M_Notch AB26L LB26L Slip DSP_Available
@persist [Controls Routing]:table Alternate:string ReverserF ReverserB Locked WQ Force Driver:entity Slip Slipping
@persist [E O B]:entity Mul Band BrakeMul [Idle Fire Wheels Coaling Stoker Injector InjectorOff ChuffLO ChuffHI]:string
@persist [ChuffLoops ChuffPitchThresholds ChuffLoopThresholds]:array SpeedUnit Fireman Low_Chuff_Duration Hi_Chuff_Duration
@persist ChatEmBrake MainRes Compressing [CompressorOn CompressorOff]:string CompressorOffTime NumCompressors AirBrakeType IncreaseTrainBrake EqualRes [Lever_26L Lever_16M AirBrakeApply AirBrakeRelease Lever_LocoBrake LocoBrakeRelease]:string DecreaseTrainBrake 
@persist CarCount BrakeLine IncreaseLocoBrake DecreaseLocoBrake LB26L_ClickQ  EmergencyBrake QReleased [EmergencyBrakeSound QuickReleaseSound BrakeScreech EMScreech]:string Moving BQ Threshold_Hard BPQ BrakeForce
@persist CarCount_Init CylinderDrainValve CylinderDrainToggle HandBrake QuickRelease HBQ QRQ MaxTrainBrakeForce MaxLocoBrakeForce Switching LocoBrakePressure
@persist ShovelRate BurnRate InjectRate BoilRate HeatRate ThetaDist CN Diameter ChuffQ DRV Johnson_Bar SelectLoopSound MaxVolumeThrottlePos
@persist SoundLevel EchoLevel DSPIDX OffSoundDuration [Base_Set Puffs DSPuffs]:array [LOChuff_Prefix HIChuff_Prefix OffSound]:string
@persist Int_MPH Int_KPH EMSlowSpin EMSlowMul IsLong
@persist [CylinderCocks CylinderCocksEnd]:string CocksEndT [Lever_HandBrake]:string
@persist SlowBrakeThreshold SBQ
@persist TPressureRate LPressureRate
@persist [WheelSlipLoop WheelSlipEnd]:string WheelSlipEndT SlipSnding
@persist DrainValve CylinderCocksStatus CksStat2 CompressorStatus

@inputs  Whistle1 Whistle2 WheelRPM ChuffIn Chuff1 Chuff2 Chuff3 Chuff4 Chuff5 Chuff6 Chuff7 Chuff8
@outputs ParticleOn Particle:string WhistleParticle:string Safeties WOn CylinderLeft:string CylinderRight:string CylinderCockLeft CylinderCockRight
@persist PStages:array Soot SootStage ThrottleStage Decayrate SafetyThresh WOn WBoth WhistleParticle:string

@inputs C1L C2L C1R C2R Base2:entity Base3:entity Base4:entity
@persist C1L C2L C1R C2R ThrottleUpper ThrottleLower [BaseChuffs]:array
@persist DSP_Available [DSP_Blacklist]:table LastChange LoopChangeCD


#Sound testing
#@outputs IsPlaying
@trigger Ignite
@model models/beer/wiremod/watersensor.mdl




#[
SETUP INSTRUCTIONS:
0- (You shouldn't have to do this unless you know what you're doing) Configure chip.
1- Place the e2 on the rear of a steam locomotive's baseplate and leave it welded.
2- Wire Pod:entity to the locomotive's pod controller Entity:entity output.
3- Wire Ignite to either a pod controller key or a NON-TOGGLED button.
4- If manual fireman mode is desired: wire Damper, AddCoal, and AddWater to either pod controller keys or wire buttons (Can be toggled or non-toggled).
5- Set up screens, gauges, indicators, heiroglyphs, whatever so you can see relevant information like speed, throttle setting, water levels, etc.

The rest of the steps are optional but neat.
8- Put a wire light on the firebox and wire it to Firebox[VECTOR]. It'll glow in accordance with the temperature level!
9-Wire the Base1 through Base4 inputs to the 4 cylinder cock particle emitters on the pistons, and Wire C1L through C2R to their corresponding outputs on the holobase.
10-Wire up the smoke/whistle particles, remember to wire "interval" on the wire emitters to the On outputs alongside everything else you wire.
11-Wire up 'WheelRPM' to a holo valve gear e2's rpm output to run the e2's stack talk based on the wheel rpm instead, making it more accurate!
12-In addition to the previous step, 'ChuffIn' is for valve gear e2s that have an output that changes between 1,2,3, and 4 depending on the wheel angle.
   Keep in mind that not all valve gear e2s have this available. But if it is, wiring 'ChuffIn' to it's correct output will help further synchronize the singular
   'chuffs' in the stack talk at slow speeds!

One last little tip: the "CONSTANT" output is a constant value of 1. Very Handy.

FIREMAN'S GUIDE:
Keep Coal and Water around 100. If you add too much of either, temperature and steam generation gets nerfed.
Keep Temperature and Steam as high as you can. Max is 200.
If your temperature is sinking, use the Damper. It will boost your temperature greatly but will eat a lot more coal.

DRIVER'S GUIDE:
The Reverser increments by 1/4ths from -1 to +1. More extreme reverser values (closer to 1) will give you more starting force but a lower top speed.
As you approach the top of your "power band," you will stop accelerating until you lower the reverser.
Reverser values of 0.125 or -0.125 give you maximum horsepower (and by extension top speed) but you won't get any starting force.

Happy Steaming!


Special thank you to the following people!

Rusty for particle addition[]Toast for DSP addition[]Mag for sound enhancments[]Big E for running improvments
Nebula for consolidating, fixing, and adding many quality of life changes[]Rebecca for fireman fixes[]TSG for fireman fixes

]#

if(dupefinished()){reset()}

if(first()|dupefinished()|duped()){

    Mul = (66640/50) #The General Force Multiplier (Lbs of Tractive effort / 50 in this case), determines pulling power. 200 is a good value.
    Band = 100 #The "Power Band." The (Highly Idealized) speed range (in MPH) over which you can go before you need to reduce the reverser value.
    #In Practice it's closer to Half what you have here. 30 is a good value.
    BrakeMul = 3 #The Braking force multiplier, independent of the trainline airbrakes. 400 is a good value.
    SoundLevel = 85 #This setting controls how far the main chugging can be heard. 85 is a good number.
    EchoLevel = 160 #This setting controls how far the chugging echo can be heard. 20-40 units above SoundLevel is good. Set to 0 to disable the echo if it glitches.
    EMSlowSpin = 1 #Changes chuffing sound to simulate wheels spinning at slow speed when emergency brake is applied.
    EMSlowMul = 0.1 #Percent at which wheels sounds "spin" at when emergency brake is applied. Max is 1.
     
    Fireman = 0 #If 0, automatic fireman. If 1, fireman is required.
    DRV = 1 #If 1, you have near continuous backwards and forwards reverser movement. If 2, you get 6 reverser positions.
    Johnson_Bar = 0 #If 1, reverser will behave like a Johnson Bar reverser. If 0, will behave like Walschaerts.
    SlowBrakeThreshold = 15 #Minimum speed before soft brakes are applied to the consist.
    CarThreshold = 1#50+4 #How many unparented props before the physical property becomes friction_00 when the brakes are off.
                          #Set to 0 to disable.
                        
    #Suddenly Sounds! Don't change these unless you know what you're doing.
    Idle = "usa_locomotive_sounds_3/steam/idle/idle7.wav"
    Fire = ""
    Wheels = "" #gsgtrainsounds/misc/wheels_jointed.wav
    WheelSlipLoop = "usa_locomotive_sounds/misc/wg_brakesqueallow.wav"
    WheelSlipEnd = "gsgtrainsounds/wheels/wheelslip_end.wav"
    WheelSlipEndT = 0.221
    Coaling = ""
    Stoker = ""
    OilAtomizing = ""
    Injector = "moztrainsounds/steam/generic/water_injectors_loop.wav"
    InjectorOff = "moztrainsounds/steam/generic/water_injectors_end.wav"
    CylinderCocks = "locnoisbygeordie/steam/misc/steam_release2_loop.wav"
    CylinderCocksEnd = "locnoisbygeordie/steam/misc/steam_release2_end.wav"
    CocksEndT = 1.18
    
    #Specify the "1" chuff sound. E2 will automatically pick out the "2" "3" and "4"
    ChuffLO = "braixssoundcollection/engine sounds/steam sounds/s2 berkshire/stroke_1.wav"
    ChuffHI = "triggerboyswhistles/nkpberksounds/chuff1.wav"
    Low_Chuff_Duration = 2 #Sound duration of the low chuff in seconds.
    Hi_Chuff_Duration = 0.9 #Sound duration of the low chuff in seconds.
                         #Decrease this if chuffs cut off at higher speeds.
    MaxVolumeThrottlePos = 5 #The stack talk will be at max volume if the throttle is at or above this value. Max is 10.
    LoopChangeCD = 1 # The cooldown in seconds between each stack talk loop change. 1 second is usually the ideal minimum.
    SpeedUnit = 2 #Speed units to use for ChuffLoopThresholds. 0: Use MPH. 1: Use KPH. 2: Use RPM.
               #Note: Changing this will require you to make adjustments to the settings in ChuffLoopThresholds, especially if using rpm.
               #Also, if 'WheelRPM' isn't wired when set to rpm mode, the e2 will use KPH instead.

    #The prefixes that comes before the actual number. Use this in case any of the folder names have numbers (Ex. Chuff_1).
    LOChuff_Prefix = "steam_engine1/piston_stroke"
    HIChuff_Prefix = ""

    ChuffLoops = array(
        "braixssoundcollection/engine sounds/steam sounds/heavy/chuffloop1.wav",
        "triggerboyswhistles/nkpberksounds/chuffloop1.wav",
        "triggerboyswhistles/nkpberksounds/chuffloop2.wav",
        "triggerboyswhistles/nkpberksounds/chuffloop3.wav",
        "triggerboyswhistles/nkpberksounds/chuffloop4.wav",
        "triggerboyswhistles/nkpberksounds/chuffloop5.wav",
        "triggerboyswhistles/nkpberksounds/chuffloop6.wav",
        "triggerboyswhistles/nkpberksounds/chuffloop7.wav"
    )
    
    ChuffPitchThresholds = array(
    # Pitch thresholds for each respective sound.
    # For each threshold, Y becomes the min of the first sound while X becomes the min of the second sound. Z is always the max of the first sound.
    # For the first sound, make X & Y the same, and for the last sound, make Y & Z the same.
    # Leave Y at 100 unless you know what you're doing.
        vec(100,100,140),
        vec(60,100,140),
        vec(60,100,140),
        vec(60,100,140),
        vec(60,100,140),
        vec(60,100,140),
        vec(60,100,140),
        vec(60,100,100)
    )
        
    ChuffLoopThresholds = array( #Minimum speeds to switch to the corresponding chuff sound. THIS ARRAY SHOULD HAVE ONE MORE ELEMENT IN IT THAN THE CHUFFLOOPS ARRAY.
        20, #First Loop Sound
        30,
        40,
        50,
        60,
        70,
        80,
        90 #Last Loop Sound
    )
    
    Lever_16M = "gsgtrainsounds/misc/airbrakes/air_16m_move.wav"
    Lever_26L = "gsgtrainsounds/misc/airbrakes/air_26l_move.wav"
    Lever_LocoBrake = "gsgtrainsounds/misc/airbrakes/air_ind_full.wav"
    Lever_HandBrake = "buttons/lever4.wav"
    BrakeScreech = "locnoisbygeordie/steam/wheels/brake_squeal_1_loop.wav"             #Brake Screech
    EMScreech = "gsgtrainsounds/wheels/brake_2.wav"
    AirBrakeApply = "gsgtrainsounds/misc/airbrakes/air_train_apply.wav"     #Sounds for Trainline Airbrakes
    AirBrakeRelease = "gsgtrainsounds/misc/airbrakes/air_train_release.wav"   
    LocoBrakeRelease = "gsgtrainsounds/misc/airbrakes/air_ind_release1.wav" #Locomotive brakes' apply sounds are very quiet so we just included a release.
    EmergencyBrakeSound = "gsgtrainsounds/misc/airbrakes/air_dump.wav"  #The sound of the engineer shitting his pants
    QuickReleaseSound = "gsgtrainsounds/misc/airbrakes/ccb2_sd70mac/emergency_release.wav"
    CompressorOn = "locnoisbygeordie/steam/misc/air_pump3_loop_fast.wav"
    CompressorOff = "locnoisbygeordie/steam/misc/air_pump3_end.wav"
    CompressorOffTime = 2.05
    OffSound = "ambient/cp_harbor/furnace_1_shot_02.wav" #Sound that plays when either the train shuts down or lacks enough steam.
    OffSoundDuration = 3
        
    Diameter = 63 #Wheel DIAMETER, in Source Units. This is important for sound calculations!
    
    # Particle Config (Rusty's smoke code)
    
    # made by Da Rustyrail
    Decayrate=10 ##How fast coal dust dissapears from the smoke (set to 0 for constant smoke color)
    
    # particles can also be 'null' which won't play anything
    PStages = array("clag_2stroke_2","White_100_Thin","White_100_Medium","White_100_Medium","Gray_100_Thin","Gray_100_Medium","Gray_100_Medium","Black_100_Thin","Black_100_Medium","Black_100_Medium")
    
    
    Soot=50 #set the starting smoke color
    
    SafetyThresh=400 #The pressure at which the safety valves open
    
    
    #Holoslip Config
    
    ThrottleUpper=9 #Upper Throttle Threshold to be passed to start wheelslipping
    
    ThrottleLower=7 #Lower Throttle threshold to go below to stop wheelslipping
    
    #--------------
    #Control Config
    #--------------
    
    #You can actually change this, but be careful.
    #Wiremod key names do not always coincide with source key names!
    
    Alternate = "lshift" #When pressing this key, all controls with "!ALT" next to them will be triggered, and all the other will be ignored.
    
    Controls["ReverserF",string]        = "d"
    Controls["ReverserB",string]        = "a"
    
    Controls["IncreaseThrottle",string] = "w"
    Controls["DecreaseThrottle",string] = "s"
    
    Controls["IncreaseTrainBrake",string]    = "w !ALT"
    Controls["DecreaseTrainBrake",string]    = "s !ALT"
    
    Controls["IncreaseLocoBrake",string] = "d !ALT"
    Controls["DecreaseLocoBrake",string] = "a !ALT"
    
    
    Controls["EmergencyBrake",string] = "Space"
    
    Controls["HandBrake",string] = "H" 
    Controls["Sander",string] = "" 
    Controls["CylinderDrainValve",string] = "H !ALT" # For toggled internal control of the cylinder drain valve. Wiring the 'Cylinder_Drains' input overrides this.
    Controls["QuickRelease",string] = "Space !ALT" 
    
    #Ignore this
    ControlPrintOrder = array("ReverserF","ReverserB","IncreaseThrottle","DecreaseThrottle","IncreaseDynamics","DecreaseDynamics","IncreaseTrainBrake","DecreaseTrainBrake","IncreaseLocoBrake","DecreaseLocoBrake","EmergencyBrake","HandBrake","Sander","CylinderDrainValve","QuickRelease")
    
    #Don't change these unless you absolutely have to
    ShovelRate = 1
    InjectRate = 0.5
    BurnRate = 0.1
    HeatRate = 1
    BoilRate = 0.1+randint(-0.02,0.02)
    TPressureRate = 2
    LPressureRate = 2
        
    #Server Blacklist for DSP
    
    DSP_Blacklist=table(
    #"01abd514-08f1-4657-86b2-a2286ae79e96" = "01abd514-08f1-4657-86b2-a2286ae79e96"
    #,"299a152e-d6ab-4895-8848-86ce91bdc1a5" = "299a152e-d6ab-4895-8848-86ce91bdc1a5"
    #,"b6d91a7b-277f-4ecc-8e51-47f016bc5fb2" = "b6d91a7b-277f-4ecc-8e51-47f016bc5fb2"
    )
    
    #End of Config
    
    
    # ANY EDITING BEYOND THIS POINT NOT DONE BY AN EMPLOYEE OF THE CLANNAD WORKS LOCOMOTIVE DIVISION,
    # CRANLEIGH EAST WORKS, OR ANY CERTIFIED LOCOMOTIVE MANUFACTURER WILL VOID ANY WARRENTY.
    
    
    #ifdef soundLevel(string)
    DSP_Available = !DSP_Blacklist:exists(serverUUID())
    if(!DSP_Available){
    printColor(vec(200),"[RSC] Server is SoundDSP blacklisted due to SoundDSP not working properly here.")
    }
    #endif
    
    holoCreate(1,entity():toWorld(vec()))
    holoScale(1,vec(0))
    holoParent(1,entity())
    
#    holoCreate(2,entity():toWorld(vec()))
#    holoScale(2,vec(0))
#    holoParent(2,entity())

    ThetaDist = 0
    
    SelectLoopSound = 1
    
    WhistleParticle=""

    LastChange = curtime()
    
    CN = 1
    CM = 5
    ChuffQ = 0
    Active = Warmup = 0
    if(Fireman){
        Coal = Water = 50
        Temp = Steam = 0
    }else{
        Coal = Temp = Water = 100
        Steam = SafetyThresh/2
    }
    Cocks = 0
    Throttle = Brake = Reverser = 0
    SwapQ = DQ = WQ = CQ = 0
    CONSTANT = 1
    Slip = 1
    
    E = entity()
    B = E:isWeldedTo()
    O = owner()
    runOnChat(1)
    
    if(Base3:isValid()&Base2:isValid()){
    Base_Set = array(B,Base2,Base3)
    }elseif(Base3:isValid()){
    Base_Set = array(B,Base3)
    }elseif(Base2:isValid()){
    Base_Set = array(B,Base2)
    }else{
    Base_Set = array(B)
    }
    
    foreach(K,Chassis:entity = Base_Set){
        
    local C_ID = K:toString()+" LoopSound"
    BaseChuffs:pushString(C_ID)

    }

        
 foreach(K,V:string = Controls){
        if(V:find(" !ALT")){
            Routing[K,number] = 1
            local EXP = V:explode(" ")
            Controls[K,string] = EXP[1,string]
        }else{
            Routing[K,number] = 0
        }
    }

    if(Fireman){
        timer("heartbeat",500)
    }
    timer("Chuff",100)

    #Sound Index Table:
    #0 Idle/WarmupFire
    #1 Chuff Loop
    #2 Wheels
    #3 Coaling
    #4 Injectors
    #5 \
    #6  > Discrete Chuffs
    #7 /

    
    ##INIT
    AB16M_Notch = AirBrakeType ? 0 : 1
    LB16M_Notch = -1
    
    SQ = 0
    On = 0
    NQ = 0
    DNQ = 0
    TQ = 0
    RevQ = 0
    ABQ = 0
    LBQ = 0
    WQ = 0
    BQ = 0
    Mode3Q = 0
    
    MainRes = 0
    EqualRes = 0
    BrakeLine = 0
    BrakeCyl = 0
    AirBrakeType = 0
    
    #MaxER = AirBrakeType ? 90 : 70
    #AB26L = AirBrakeType ? 45 : 0
    #LB26L = 0
    #TrainBrakePressure = MaxER/2
    LocoBrakePressure = 0
    #ER = 0
    
    BrakeInfo = array(MainRes,EqualRes,BrakeLine,LocoBrakePressure,BrakeCyl)
    
    LB26L_ClickQ = 0
    BPQ = 0
    EMQ = 0
    Locked = 0
    Emergency = 0
    THQ = IHQ = 0
    HBQ = 0
    
    CarCount_Init = E:getConstraints():count()
    NumCompressors=1
    MaxLocoBrakeForce = 300000/70
    MaxTrainBrakeForce = 0
    IsLong = (CarCount_Init>=CarThreshold)&(round(CarThreshold)>0)
    
    Threshold_Hard = 1
    
    if(!FireEnt:isValid()){
    FireEnt = B
    }

    function number entity:extraProps(Init){
        local Extra = Switching ? 0 : floor((E:getConstraints():count() - Init)/3)
        MaxTrainBrakeForce = BrakeMul*Extra/(70)
        IsLong = (CarCount>=CarThreshold)&(round(CarThreshold)>0)
        return Extra
        
    }        
    
    function void array:abRest(){
        local Ents = E:getConstraints()
        foreach(K,V:entity = Ents){
            if(V!=Plow){
            V:propPhysicalMaterial("friction_25")
            }
        }
    }
    function void entity:abRelease(){
        local Ents = E:getConstraints()
        local Driverent=Drivers
        foreach(K,V:entity = Driverent){
            V:propPhysicalMaterial("friction_00")
        }
        foreach(K,V:entity = Ents){
            if(V!=Plow){
            V:propPhysicalMaterial(IsLong ? "friction_00" : "gmod_ice")
            }
        }

    }
    function void entity:abSoftApply(){
        local Ents = E:getConstraints()
        local Driverent=Drivers
        foreach(K,V:entity = Driverent){
            V:propPhysicalMaterial("friction_00")
        }
        foreach(K,V:entity = Ents){
            if(V!=Plow){
            V:propPhysicalMaterial(IsLong ? "paper" : "friction_25")
            }
        }

    }
    function number jankTerpolate(Value_In,Lower,Upper) #Doesn't really interpolate but it sure helps
    {
    local Dif = Upper-Lower
    local Rat = clamp((Value_In-Lower)/Dif,0,1)
    return Rat
    }
    function void compressorsoundend()
    {
    if(CompressorOff){
    (->CompressorEnt ? CompressorEnt : E):soundPlay("Compressor",CompressorOffTime,CompressorOff)
    }else{
    soundStop("Compressor",CompressorOffTime)
    }
    }
}

interval(50)

        if(clk("THQ")){
            THQ = 0
            soundStop(5)
        }elseif(clk("IHQ")){
            IHQ = 0
            soundStop(5)
        }

    #=Shutoff Sounds=#

    if(changed(Active)&!Active){
    if(Compressing){
    Compressing = 0
    compressorsoundend()
    }
    soundPlay("Shutdown_Sound",OffSoundDuration,OffSound)
    soundStop(16)
    soundStop(105)
    soundStop("EMScreech")
    
    if(Cocks){foreach(K,E:entity = Base_Set){if(CylinderCocksEnd){E:soundPlay("Cocks"+K,CocksEndT,CylinderCocksEnd)}else{soundStop("Cocks"+K,CocksEndT)}}}
        
    }
    
    #=Cylinder Cocks Sounds=#
        
    #if(changed(Cocks)){
    if(Cocks&!CksStat2){
    stoptimer("EndCocks")
    foreach(K,E:entity = Base_Set){soundStop("CocksEnd"+K,0) E:soundPlay("Cocks"+K,0,CylinderCocks)}
    CylinderCocksStatus = 1
    CksStat2 = 1
    }elseif(CksStat2&!Cocks){
    timer("EndCocks",CocksEndT*1000)
    foreach(K,E:entity = Base_Set){
    if(CylinderCocksEnd){
    soundStop("Cocks"+K,0)
    E:soundPlay("CocksEnd"+K,CocksEndT,CylinderCocksEnd)
    }else{
    soundStop("Cocks"+K,CocksEndT)
    }
    }
    CksStat2 = 0
    }
    #}
        
    if(clk("EndCocks")){CylinderCocksStatus = 0} # Sound Bug Prevention.
    if(!CylinderCocksStatus){for(I=1,Base_Set:count()){soundStop("Cocks"+I,0)}}

    #= Compressor Stuck Sound Prevention =#
    
    if(clk("endcompressor")){CompressorStatus = 0} # Sound Bug Prevention.
    if(!CompressorStatus){soundStop("Compressor",0)}


#========Synchronous
if(clk("interval")){
    
    #Warmup
    if(Warmup){
        if(Steam >= 100){
            Active = 1
            Warmup = 0
            (->StackEnt ? StackEnt : B):soundPlay(0,0,Idle)
            soundPitch(10,0)
            
        }
    }elseif(Active){
        #Running
            
            
    Driver = Pod:driver()
    
    if(Driver){
        
        local Shifting = Driver:keyPressed(Alternate)
        
        local RF = "ReverserF"
        local RB = "ReverserB"
        
        ReverserF = Driver:keyPressed(Controls[RF,string]) & (Routing[RF,number] ? Shifting : !Shifting)
        ReverserB = Driver:keyPressed(Controls[RB,string]) & (Routing[RB,number] ? Shifting : !Shifting)
        
        IncreaseThrottle = Driver:keyPressed(Controls["IncreaseThrottle",string]) & (Routing["IncreaseThrottle",number] ? Shifting : !Shifting)
        DecreaseThrottle = Driver:keyPressed(Controls["DecreaseThrottle",string]) & (Routing["DecreaseThrottle",number] ? Shifting : !Shifting)
        
        IncreaseTrainBrake = Driver:keyPressed(Controls["IncreaseTrainBrake",string]) & (Routing["IncreaseTrainBrake",number] ? Shifting : !Shifting)
        DecreaseTrainBrake = Driver:keyPressed(Controls["DecreaseTrainBrake",string]) & (Routing["DecreaseTrainBrake",number] ? Shifting : !Shifting)
        
        IncreaseLocoBrake = Driver:keyPressed(Controls["IncreaseLocoBrake",string]) & (Routing["IncreaseLocoBrake",number] ? Shifting : !Shifting)
        DecreaseLocoBrake = Driver:keyPressed(Controls["DecreaseLocoBrake",string]) & (Routing["DecreaseLocoBrake",number] ? Shifting : !Shifting)
        
        EmergencyBrake = Driver:keyPressed(Controls["EmergencyBrake",string]) & (Routing["EmergencyBrake",number] ? Shifting : !Shifting)
        
        HandBrake = Driver:keyPressed(Controls["HandBrake",string]) & (Routing["HandBrake",number] ? Shifting : !Shifting)
        Sander = Driver:keyPressed(Controls["Sander",string]) & (Routing["Sander",number] ? Shifting : !Shifting)
        CylinderDrainValve = Driver:keyPressed(Controls["CylinderDrainValve",string]) & (Routing["CylinderDrainValve",number] ? Shifting : !Shifting)
        QuickRelease = Driver:keyPressed(Controls["QuickRelease",string]) & (Routing["QuickRelease",number] ? Shifting : !Shifting)
    }
    V = -E:velL():z()*1.25
    Spd = abs(V)
    Int_MPH = toUnit("mph",V)
    Int_KPH = toUnit("km/h",V)
    MPH = abs(Int_MPH)
    KPH = abs(Int_KPH)
    
    Moving = MPH>Threshold_Hard
    #Wheel Sound
    if(Wheels){
    if(Moving){
        if(!WQ){
            WQ = 1
            E:soundPlay("WheelSound",0,Wheels)
        }
        soundPitch("WheelSound",MPH*3.3)
    }elseif(!Moving & WQ){
        WQ = 0
        soundStop("WheelSound")
    }
    }
        #==========================
        #Train Brake And Loco Brake
        #==========================
        
        #----------
        #Compresors
        #----------
        if((MainRes<30) & !Compressing){
            Compressing = 1
            CompressorStatus = 1
            (->CompressorEnt ? CompressorEnt : E):soundPlay("Compressor",0,CompressorOn)
            stoptimer("endcompressor")
        }elseif((MainRes>150) & Compressing){
            Compressing = 0
            compressorsoundend()
            timer("endcompressor",CompressorOffTime*1000)
        }
        if(Compressing){MainRes += 0.5*NumCompressors}
                
        #--------------------
        #Equalizing Reservoir
        #--------------------
        

            #16M Trainline
            if(IncreaseTrainBrake & (AB16M_Notch<1) & !ABQ){
                ABQ = 1
                Pod:soundPlay(1,1,Lever_16M)
                AB16M_Notch++
            }elseif(DecreaseTrainBrake & (AB16M_Notch>-1) & !ABQ){
                ABQ = 1
                Pod:soundPlay(1,1,Lever_16M)
                AB16M_Notch--
            }elseif(!DecreaseTrainBrake & !IncreaseTrainBrake & ABQ){
                ABQ = 0
            }
            
        #ER Hiss
        if((AB16M_Notch==1) & (EqualRes>0) & !THQ){
            THQ = 1
            Pod:soundPlay(15,4,AirBrakeApply)
            timer("THQ",6000)
        }elseif((AB16M_Notch==-1) & (EqualRes<90) & !THQ){
            THQ = 1
            Pod:soundPlay(15,4,AirBrakeRelease)
            timer("THQ",6000)
        }

        #ER Indexing
        if((AB16M_Notch==1) & (EqualRes>0)){
            EqualRes-=TPressureRate
        }elseif((AB16M_Notch==-1) & (EqualRes<90)){
            EqualRes+=TPressureRate
        }
        #----------
        #Brake Line
        #----------
        if(changed(CarCount) & (($CarCount)>0)){
            BrakeLine *= (CarCount - $CarCount)/CarCount
        }
        if(BrakeLine > EqualRes){
            #Apply
            BrakeLine -= 1/(CarCount/16 + 1)
            
            
        }elseif(BrakeLine < EqualRes){
            #Release
            if(MainRes >= 30){
                MainRes -= 0.125*(CarCount/4 + 1)/NumCompressors
                BrakeLine += 1/(CarCount/16 + 1)
            }
        }
        if(abs(EqualRes-BrakeLine)<=(1/(CarCount/16 + 1))){
            BrakeLine = EqualRes
        }
        
        #----------------
        #Locomotive Brake
        #----------------

            #16M Independent
            if(IncreaseLocoBrake & (LB16M_Notch<1) & !LBQ){
                LBQ = 1
                LB16M_Notch++
                if(LB16M_Notch==1){Pod:soundPlay(1,1,Lever_LocoBrake)}
            }elseif(DecreaseLocoBrake & (LB16M_Notch>-1) & !LBQ){
                LBQ = 1
                LB16M_Notch--
            }elseif(!DecreaseLocoBrake & !IncreaseLocoBrake & LBQ){
                LBQ = 0
            }
        
        #LB Hiss
        if((LB16M_Notch==-1) & (LocoBrakePressure>0) & !IHQ){
            IHQ = 1
            Pod:soundPlay(15,4,LocoBrakeRelease)
            timer("IHQ",6000)
        }
        
        #LB Indexing
        if((LB16M_Notch==1) & (LocoBrakePressure<90)){
            LocoBrakePressure+=LPressureRate
        }elseif((LB16M_Notch==-1) & (LocoBrakePressure>0)){
            LocoBrakePressure-=LPressureRate
            
            if(LocoBrakePressure>(90-BrakeLine)){MainRes -= 0.125/NumCompressors}
        }
        
        #Cylinder
        BrakeCyl = max(LocoBrakePressure,90-BrakeLine)/2.5
                
        #Brake Info Array
        BrakeInfo = array(MainRes,EqualRes,BrakeLine,LocoBrakePressure,BrakeCyl)
        
        #Emergency Brake
        if((EmergencyBrake | EmBrake | ChatEmBrake) & !Emergency){
            Emergency = 1
            ChatEmBrake = 0
            BrakeLine = 0
            EqualRes = 0
            AB16M_Notch = 2
            
            local Ents = E:getConstraints()
            foreach(K,V:entity=Ents){
                if(V!=Plow){
                V:propPhysicalMaterial(IsLong ? "metal" : "metal")
                }
            }
            
            Pod:soundPlay(15,0,EmergencyBrakeSound)
            Pod:soundPlay(1,1,AirBrakeType ? Lever_26L : Lever_16M)
            
            if(Moving){
            B:soundPlay("EMScreech",0,EMScreech)
            }
            
            
            Throttle = 0

        }elseif(changed(Brake)&!Brake|changed(BPQ)&BPQ){
        soundStop("EMScreech")
        }
        
        if(changed(Brake)&!Brake){
        Emergency = 0   
        }
                
        Brake = (BrakeCyl > 0)
        
        # Apply some friction to relieve strain on couplings to prevent buckling. #
        
        if(Brake&!SBQ&(MPH<SlowBrakeThreshold)&Moving){
            SBQ=1
            E:abSoftApply()
        }

        #Brake Screeching Sounds
        local Screech = Moving & Brake & (MPH<SlowBrakeThreshold)
        if(Screech & !BQ){
                BQ = 1
            B:soundPlay(16,0,BrakeScreech)
        }elseif(!Screech & BQ){
            BQ = 0
            soundStop(16)
            soundStop("EMScreech")
        }
        
        #Train Brake Physprops
        if(Brake & (MPH<Threshold_Hard) & !BPQ){
            BPQ = 1
            Trucks:abRest()
            Locked = 1
            
        }
        if(!Brake & BPQ | changed(Brake) & !Brake){
            BPQ = 0
            SBQ = 0
            E:abRelease()
            Locked = 0
            Emergency = 0
            CarCount = E:extraProps(CarCount_Init)
        }
                
        #Train Brake Force Calculation
        if((MPH>Threshold_Hard)&!Locked){
            if(CarCount<1){
                CarCount = E:extraProps(CarCount_Init)
            }
            local TBF = CarCount*(90-BrakeLine)*MaxTrainBrakeForce
            local LBF = ((90-BrakeLine)>LocoBrakePressure ? (90-BrakeLine) : LocoBrakePressure)*MaxLocoBrakeForce
            BrakingForce = sign(V)*(LBF+TBF)
            
        }else{
            BrakingForce = 0
            #LocoBrakingForce = 0
        }
    

    
        #Throttle
        if(IncreaseThrottle|DecreaseThrottle){
            Throttle += (0.25)*(IncreaseThrottle-DecreaseThrottle)
            Throttle = clamp(Throttle,0,10)
        }
        #Velocity Info

        
        #Cylinder Cocks

        
            CylinderLeft=C2R+C1R ? "White_100_Medium" : "White_100_Medium"
    if (Throttle&Cocks){
    CylinderCockLeft=(C2R+C1R)
    }
    else {
    CylinderCockLeft = 0

    }
 
    CylinderRight=C2L+C1L ? "White_100_Medium" : "White_100_Medium"
    if (Throttle&Cocks){
    CylinderCockRight=(C2L+C1L)
    }
    else {
    CylinderCockRight = 0

    }
            if(changed(CylinderDrainValve)&CylinderDrainValve){CylinderDrainToggle = !CylinderDrainToggle}
            DrainValve = ->Cylinder_Drains ? Cylinder_Drains : CylinderDrainToggle
            Cocks = (DrainValve*Throttle*Active > 0)
        
        #Chuff Sound Selection
        #Chuff Sound Modulation

        #Force Application
        
        
        local Dir = -E:up()
        local HB = Band/2
        local MV = MPH*sign(V)
        if(Johnson_Bar){
            RShift = 2*HB*Reverser
        }else{
            RShift = 2*(Reverser!=0)*(Reverser >= 0 ? (1 - Reverser) : (-1 - Reverser))*HB
        }
        LB = RShift - HB
        UB = LB + Band
        if((MV > LB)&(MV < UB)&(Reverser!=0)){
            
            Force = (Fireman ? 1 : 1.5)*(Johnson_Bar ? 2 : 1)*(Steam/100)*200*(sign(Reverser)*(1+abs(Reverser)))*Throttle*Mul*((MV - HB - RShift)*(MV + HB - RShift)*(-1/(HB^2))) 
        }else{
            Force = 0
        }
        
        
        B:applyForce(Dir*(Force-(BrakingForce*BrakeMul)))
    }else{
    #Off
        Cocks = 0
    }
   

    ParticleOn=Active

    
    Soot=Soot-Decayrate
    clamp(Soot,0,100)

    if(AddCoal){
        Soot=100
    }
    
    if(changed(Whistle1|Whistle2)){
    WOn=Whistle1|Whistle2
    
    WBoth=Whistle1&Whistle2
    
    WhistleParticle=WBoth ? "White_100_Medium" : "White_100_Thin"
    }


    Safeties=Steam>=SafetyThresh
    
    SootStage=(Soot>=33)+(Soot>=66)
    ThrottleStage=(Throttle>0)+(Throttle>=3)+(Throttle>=6)
    
    if(ThrottleStage & (Chuff1|Chuff2|Chuff3|Chuff4|Chuff5|Chuff6|Chuff7|Chuff8)){
        Particle=PStages[ThrottleStage+1+((SootStage==1)*3)+((SootStage==2)*6),string]
    }
    else{
        Particle=PStages[1,string]
    }

    if(C1L==1){B:soundPlay(100,0,"triggerboyswhistles/safeties.wav")}
    else{soundStop(100,1)} 
    if(C2L==1){Base2:soundPlay(101,0,"triggerboyswhistles/safeties.wav")}
    else{soundStop(101,1)} 
    if(C1R==1){Base3:soundPlay(102,0,"triggerboyswhistles/safeties.wav")}
    else{soundStop(102,1)} 
    if(C2R==1){Base4:soundPlay(103,0,"triggerboyswhistles/safeties.wav")}
    else{soundStop(103,1)} 
    
}else{
#========Asynchronous
    #Ignition
    if(Ignite & ~Ignite){
        if(Active|Warmup){
            Warmup = Active = 0
            Reverser = Throttle = 0
            Coal = Water = Fireman ? 50 : 100
            Temp = Fireman ? 0 : 100
            Steam = Fireman ? 0 : (SafetyThresh/2)
            soundStop(0)
            foreach(K,Chf:string = BaseChuffs){
            soundStop(Chf,0)
            soundStop(Chf+" B",0)
            }
            soundStop(3)
            Firebox = vec()
        }else{
            if(Fireman){
                
                Warmup = 1
                B:soundPlay(0,0,Fire)
            }else{
                Firebox = vec(255,Temp,(Temp > 100)*(Temp - 100))
                Active = 1
                Warmup = 0
                (->StackEnt ? StackEnt : B):soundPlay(0,0,Idle)
                soundPitch(10,0)
            }
        }
    }
    
    #Controls
    if((ReverserF) | (ReverserB)){
        Reverser += (DRV ? 0.03125 : 0.03125)*(ReverserF - ReverserB)
        Reverser = clamp(Reverser,-1,1)
        R8 = Reverser*8
    }
    
            #Fireman Controls
        if(Fireman){
            if(changed(AddCoal)|changed(Active)){
                if(AddCoal|changed(Active)&AddCoal){
                    FireEnt:soundPlay(100000,0,(OilAtomizing) ? OilAtomizing : (Active & Stoker) ? Stoker : Coaling)
                }else{
                    soundStop(100000)
                }
            }
            if(changed(AddWater)){
                if(AddWater){
                    FireEnt:soundPlay(100001,0,Injector)
                    soundVolume(100001,0.5)
                    soundStop(100002)
                }else{
                    FireEnt:soundPlay(100002,3,InjectorOff)
                    soundVolume(100002,0.5)
                    soundStop(100001)
                }
            }
        }
    #Handbrake
    if(HandBrake & !HBQ){
        HBQ = 1
        Pod:printColorDriver(vec(200),"[RSC] Hold key to Apply Handbrakes.")
        timer("HB_Check",1000)
    }elseif(!HandBrake & HBQ){
        HBQ = 0
    }

    #Handbrake Check
    if(clk("HB_Check")){
    if(HandBrake){
        Pod:printColorDriver(vec(200),"[RSC] Handbrakes ",vec(255,191,0),"Applied")
        Pod:soundPlay(1,1,Lever_HandBrake)

            BrakeLine = 0
            EqualRes = 0
            LB16M_Notch = 1
            Throttle = 0
            
            local Ents = E:getConstraints()
            foreach(K,V:entity=Ents){
                if(V!=Plow){
                V:propPhysicalMaterial("slipperyslime")
                }
            }
    }
    }
    
    #Quick Release
    if(QuickRelease & !QRQ){
        QRQ = 1
        timer("re-release",0)
    }elseif(!QuickRelease & QRQ){
        QRQ = 0
    }

}
        
        #Wheelslip
        if(Throttle>(ThrottleUpper*( (MPH/(Band/(1.2+abs(Reverser))))+1))&Slip<(Throttle*(0.6))&Reverser!=0){Slip+=(0.0625)}
        elseif(Throttle<(ThrottleLower*(MPH/(Band/(1.2+abs(Reverser))))+1)&Slip>1&Reverser!=0){Slip-=0.0625}
        elseif(Reverser==0&Slip>1){Slip-=0.0625}
        
        #if(changed(Slip)&Slip<=1.0625){
                if(Slip>1 & !Slipping){ Slipping = 1 SlipSnding = 1 entity():soundPlay("slipping",0,WheelSlipLoop) soundStop("slipend",0) stoptimer("recheck_slip") }
                elseif(Slip<=1 & Slipping){ Slipping = 0 entity():soundPlay("slipend",WheelSlipEndT,WheelSlipEnd) soundStop("slipping",0) timer("recheck_slip",WheelSlipEndT*1000) }
                if(clk("recheck_slip")){soundStop("slipping",0)}
            #}

if(clk("heartbeat") & Fireman){
#========Fireman Heartbeat
    Coal += AddCoal*ShovelRate - BurnRate*(1+ 3*Damper)*(Active|Warmup)
    Coal = clamp(Coal,0,200)
    
    Temp += (((Coal - 200)*(Coal))/(-10000) - 0.875*!Damper - BoilRate*(Temp > 75)*(1))*HeatRate*(Active|Warmup)
    Temp = clamp(Temp,0,200)
    
    Water += AddWater*InjectRate - (Temp > 75)*BoilRate*(Temp/100)*(Active|Warmup)*0.5
    Water = clamp(Water,0,200)
    
    Steam += (Temp > 75)*(Temp/100)*(Water - 200)*(Water)/(-10000) - (Throttle/3.5)*(abs(Reverser)) - AddWater*InjectRate*2 - SaftiesAF*ShovelRate*2 -0.001
    Steam = clamp(Steam,0,SafetyThresh)
    
    Firebox = vec(255,Temp,(Temp > 100)*(Temp - 100))*(Active|Warmup)
    
    if(Active & Steam < 75){
        Active = 0
        Warmup = 1
        Throttle = 0
        B:soundPlay(0,0,Fire)
        foreach(K,Chf:string = BaseChuffs){
        soundStop(Chf,0)
        soundStop(Chf+" B",0)
        }
        soundStop(3)
    }
    timer("heartbeat",500)
    #print("Heartbeat")
                                                                                                                                                                                                                                       #nuts balls even
}

#if(clk("Chuff")){
    #Chuff
    #print("Chuff")
    if(Active){

        local Now = curtime()
        
        #if(Int > 150){
        
        local WRPMRunning = (SpeedUnit>=2 & ->WheelRPM)
        local ABSWRPM = abs(WheelRPM)
        local SampleSpeed = (WRPMRunning ? ABSWRPM : SpeedUnit ? Int_KPH : Int_MPH)
        local CThreshold = ChuffLoopThresholds[1,number]
        local Slip_Dir = (Reverser>0 ? 1 :Reverser<0 ? -1 : 0)
        local Slip_Modifier = ((Slip^2)*Slip_Dir)
        local SpinSpeed = WRPMRunning ? ABSWRPM : abs(SampleSpeed+Slip_Modifier)*(Emergency&EMSlowSpin ? clamp(EMSlowMul,0,1) : 1)
        local ChuffWired = ->ChuffIn
        
        if(SpinSpeed < CThreshold){
            
            foreach(K,E:entity = Base_Set){
            foreach(K2,E2:string = ChuffLoops){
            local SndID = ("Base"+K+"ChfLoop"+K2)
            soundVolume(SndID,0)  
            }}
            foreach(K,E:string = ChuffLoops){
            #ifdef soundDSP(string,number)
            soundVolume("DSPLoop"+K,0)
            #endif
            }

            CHFLI = 0
            CHFDSPLI = 0
            RedisableC = 0


            if(ChuffQ>0){
                 
            Puffs = array()
            DSPuffs = array()
            ChuffQ = 0
                
            foreach(K,E:entity = Base_Set){
            foreach(K2,E2:string = ChuffLoops){
            local SndID = ("Base"+K+"ChfLoop"+K2)
            soundStop(SndID,0)
            }}
            foreach(K,E:string = ChuffLoops){
            #ifdef soundDSP(string,number)
            soundStop("DSPLoop"+K,0)
            #endif
            }

            }
            
            DoChuff = ChuffWired ? ((CN != ChuffIn) & ChuffIn>=1) : 0

            if(!ChuffWired){
            #V in inches per second
            local Circ = _PI*Diameter #Circumference of Wheel; Distance to travel for one revolution
            
            ThetaDist += (WRPMRunning ? ABSWRPM/6 : ((V/50)+(((Slip*Slip_Dir)*(Slip!=1))*1.1))*(Emergency&EMSlowSpin ? clamp(EMSlowMul,0,1) : 1))
            
            Progress = ThetaDist/Circ

            if(ThetaDist > Circ/4){
                ThetaDist += -Circ/4
                DoChuff = 1
            }elseif(ThetaDist < -Circ/4){
                ThetaDist += Circ/4
                DoChuff = 1
            }
            
            }

            local Chuff_Duration = (SpinSpeed < CThreshold/2) ? Low_Chuff_Duration : Hi_Chuff_Duration
            local Chf_T = Chuff_Duration-((Chuff_Duration*0.75)*clamp(SpinSpeed/CThreshold,0,1))
            
            if(DoChuff){
                
                if(!ChuffWired){
                CN++
                if(CN==5){CN=1}
                }else{
                CN = ChuffIn
                }
            
                local Chf = (SpinSpeed < CThreshold/2) ? ChuffLO:replace(LOChuff_Prefix+"1",LOChuff_Prefix+CN:toString()) : ChuffHI:replace(HIChuff_Prefix+"1",HIChuff_Prefix+CN:toString())
                
                if(EchoLevel>SoundLevel){
                local DSPuff_ID = "DSP_Puff "+ CN:toString()
                
                holoEntity(1):soundPlay(DSPuff_ID,Chf_T,Chf)
                #ifdef soundDSP(string,number)
                if(DSP_Available){
                soundLevel(DSPuff_ID,EchoLevel)
                soundDSP(DSPuff_ID,16)
                }
                #endif
                soundVolume(DSPuff_ID,clamp(Throttle/MaxVolumeThrottlePos,0,1))
                #DSPuffs[CN,string] = DSPuff_ID
                }
                
                foreach(K,Chassis:entity = Base_Set){
                
                local C_Chuff_ID = K:toString()+" Puff Sound " + CN:toString()
                #Pod:printDriver(Chf)
                Chassis:soundPlay(C_Chuff_ID,Chf_T,Chf)
                #ifdef soundDSP(string,number)
                if(DSP_Available){
                soundLevel(C_Chuff_ID,SoundLevel)
                }
                #endif
                soundVolume(C_Chuff_ID,clamp(Throttle/MaxVolumeThrottlePos,0,1))
                #Puffs[CN*K,string] = C_Chuff_ID
                
                }
                
                #IsPlaying = soundPlaying((CM+30))

            }
            SelectLoopSound = 1
            #timer("Chuff",20)
        
        }else{ #Loop sounds
            
            
            if(!ChuffQ){
            SelectLoopSound = 1
            CN = 1
            #[foreach(K,P:string = Puffs){
            soundStop(P)
            }
            foreach(K,P:string = DSPuffs){
            soundStop(P)   
            }]#
            }
            
            SelectLoopSound = clamp(SelectLoopSound,0,(ChuffLoops:count()-1))
            
            if(ChuffQ!=SelectLoopSound){
                ChuffQ=SelectLoopSound
            stoptimer("SwitchLoops")
            timer("SwitchLoops",500) #1000 #Failsafe if sounds don't play.
            }
            
            local LoopRange = SelectLoopSound>=(ChuffLoops:count()-1) ? array(1) : SelectLoopSound>1 ? array(-1,1) : array(0,1)
            
            if(changed(ChuffQ)|clk("SwitchLoops")){
            foreach(K,E:entity = Base_Set){
            foreach(K2,E2:number = LoopRange){
            local SndID = ("Base"+K+"ChfLoop"+(SelectLoopSound+E2))
            soundStop(SndID,0)
            E:soundPlay(SndID,0,ChuffLoops[(SelectLoopSound+E2),string])
            #ifdef soundDSP(string,number)
            soundLevel(SndID,SoundLevel)
            #endif
            soundVolume(SndID,0)
            }
            }
            #ifdef soundDSP(string,number)
            stoptimer("SwitchLoopsDSP")
            timer("SwitchLoopsDSP",250) #500
            #endif
            }

            if(changed(ChuffQ)|clk("SwitchLoopsDSP")){
            foreach(K,E:number = LoopRange){
            local SndID = ("DSPLoop"+(SelectLoopSound+E))
            soundStop(SndID,0)
            holoEntity(1):soundPlay(SndID,0,ChuffLoops[(SelectLoopSound+E),string])
            #ifdef soundDSP(string,number)
            soundLevel(SndID,EchoLevel)
            soundDSP(SndID,16)
            #endif
            soundVolume(SndID,0)  
            }
            }
            
            if(Now>(LastChange+clamp(LoopChangeCD,0,999999))){
            if (SpinSpeed >= ChuffLoopThresholds[SelectLoopSound+1,number]) { SelectLoopSound = min(SelectLoopSound+1,ChuffLoopThresholds:count()) LastChange = Now}
            if (SpinSpeed < ChuffLoopThresholds[SelectLoopSound,number]) { SelectLoopSound = max(SelectLoopSound-1,1) LastChange = Now}
            }
            MyRangeMin = !ChuffQ ? ChuffLoopThresholds[1,number] : ChuffLoopThresholds[SelectLoopSound,number]
            MyRangeMax = !ChuffQ ? ChuffLoopThresholds[2,number] : ChuffLoopThresholds[SelectLoopSound+1,number]

            local Not_Max = SelectLoopSound!=(ChuffLoops:count()-1)

            #OM = 600*Omega
                
            if(Reverser>=0){local OM = 100 + 10*(SpinSpeed - MyRangeMin)/(MyRangeMax - MyRangeMin)}
            else{local OM = 100 + 10*(SpinSpeed - MyRangeMin)/(MyRangeMax - MyRangeMin)}
            
            
            local Ratio = jankTerpolate(SpinSpeed,MyRangeMin,MyRangeMax)            
            local InvRatio = 1-(Ratio*Not_Max)
            
            local FirstSound_Set = ChuffPitchThresholds[SelectLoopSound,vector]
            local NextSound_Set = ChuffPitchThresholds[SelectLoopSound+1,vector]
            
            local Pitch_Diff = FirstSound_Set[3]-FirstSound_Set[2]
            local Next_Pitch_Diff = (NextSound_Set[2]-NextSound_Set[1])*Not_Max
            
            local FirstPitch = FirstSound_Set[2]+(Pitch_Diff*Ratio)
            local NextPitch = NextSound_Set[1]+(Next_Pitch_Diff*Ratio)*Not_Max
            
            local Throttle_Mod = clamp(Throttle/MaxVolumeThrottlePos,0,1)*random(0.95,1)


            local Rt1 = (InvRatio*Throttle_Mod)
            local Rt2 = (Ratio*Throttle_Mod)

            foreach(K,E:entity = Base_Set){
            local SndID = ("Base"+K+"ChfLoop"+SelectLoopSound)
            local SndID2 = ("Base"+K+"ChfLoop"+(SelectLoopSound+1))
            soundVolume(SndID,Rt1)
            soundVolume(SndID2,Rt2)
            soundPitch(SndID,FirstPitch)
            soundPitch(SndID2,NextPitch)
            }
            
            

            #ifdef soundDSP(string,number)
            soundVolume("DSPLoop"+SelectLoopSound,Rt1)
            soundVolume("DSPLoop"+(SelectLoopSound+1),Rt2)
            soundPitch("DSPLoop"+SelectLoopSound,FirstPitch)
            soundPitch("DSPLoop"+(SelectLoopSound+1),NextPitch)
            #endif
           
            #timer("Chuff",100)
        }
    }else{
        
            foreach(K,E:entity = Base_Set){
            foreach(K2,E2:string = ChuffLoops){
            local SndID = ("Base"+K+"ChfLoop"+K2)
            soundVolume(SndID,0)  
            }}
            foreach(K,E:string = ChuffLoops){
            #ifdef soundDSP(string,number)
            soundVolume("DSPLoop"+K,0)
            #endif
            }

        #timer("Chuff",100)
    }
       
#}
        
# Re-Release
        
if(clk("re-release")){
    Brake = 0
    AB16M_Notch = -1
    LB16M_Notch = -1
    local TBrakeP = (90-BrakeLine)*(0.125*(CarCount/4 + 1)/NumCompressors)
    local LBrakeP = (clamp(LocoBrakePressure-(90-BrakeLine),0,180)*(0.125/NumCompressors))
    MainRes -= (TBrakeP + LBrakeP)
    LocoBrakePressure = 0
    EqualRes = 90
    BrakeLine = 90
    QReleased = 1
}
if(changed(QReleased)&QReleased&!Brake&!LocoBrakePressure&(EqualRes == 90)&(BrakeLine == 90)){
Pod:soundPlay("QRelease",0,QuickReleaseSound)
}
if(Brake&QReleased){QReleased = 0}

#========Chat
if(chatClk(O)){
    local LS = O:lastSaid()
    local Sentence = LS:explode(" ")
    local CMD = Sentence[1,string]
    local ARG = Sentence[2,string]
    
    if(Active){
        #Engine On Commands
        if(CMD==".throttle"){
            hideChat(1)
            Throttle = clamp(ARG:toNumber(),0,10)
            printColor(vec(200),"[RSC] Setting Throttle to ",vec(255),Throttle:toString()+"/10")
        }
        if(CMD==".reverser"){
            hideChat(1)
            local Val = (1+DRV)*4
            Reverser = round(clamp(ARG:toNumber()*Val,-Val,Val))/Val
            printColor(vec(200),"[RSC] Setting Reverser to ",vec(255),Reverser:toString())
            R8 = Reverser*8
        }
        if(CMD==".brake"){
            hideChat(1)
            if(ARG=="1"){
                Brake = 1
                Throttle = 0
                AB16M_Notch = 1
                #abSoft()
                printColor(vec(200),"[RSC] Airbrakes ",vec(255,191,0),"Applied")
            }elseif(ARG=="0"){
                Brake = 0
                AB16M_Notch = -1
                LB16M_Notch = -1
                #abRelease()
                timer("re-release",0)
                timer("re-release",500)
                printColor(vec(200),"[RSC] Airbrakes ",vec(0,200,0),"Released")
            }else{
                Brake = 1
                Throttle = 0
                ChatEmBrake = (!Emergency)
                #abHard()
                printColor(vec(200),"[RSC] Airbrakes ",vec(255,0,0),"EMERGENCY")
            }
        }
        
        
    }else{
        #Engine Off Commands
        if(CMD==".fireman"){
            hideChat(1)
            Fireman = ARG:toNumber()
            if(Fireman){
                timer("heartbeat",100)
                Coal = Water = 50
                Temp = Steam = 0
                printColor(vec(200),"[RSC] Manual Fireman ",vec(0,200,0),"Enabled")
            }else{
                
                Coal = Temp = Water = 100
                Steam = SafetyThresh/2
                printColor(vec(200),"[RSC] Manual Fireman ",vec(200,0,0),"Disabled")
            }
        }
    }
    #Anytime Commands
    if(CMD==".ignite"){
        hideChat(1)
        if(ARG:toNumber()){
            if(Fireman){
                
                Warmup = 1
                B:soundPlay(0,0,Fire)
                printColor(vec(200),"[RSC] Warming Up")
            }else{
                Active = 1
                Warmup = 0
                Firebox = vec(255,Temp,(Temp > 100)*(Temp - 100))
                (->StackEnt ? StackEnt : B):soundPlay(0,0,Idle)
                soundPitch(10,0)
                printColor(vec(200),"[RSC] Boiler On")
            }
        }else{
            Warmup = Active = 0
            Reverser = Throttle = 0
            Coal = Water = Fireman ? 50 : 100
            Temp = Fireman ? 0 : 100
            Steam = Fireman ? 0 : SafetyThresh/2
            Cocks = 0
            soundStop(0)
            soundStop(3)
            printColor(vec(200),"[RSC] Boiler Off")
            Firebox = vec()
        }
    }
    if(CMD==".mul"){
        hideChat(1)
        Mul = ARG:toNumber()
        printColor(vec(200),"[RSC] Force Mul set to ",vec(0,0,255),Mul:toString())
    }
    if(CMD==".band"){
        hideChat(1)
        Band = ARG:toNumber()
        printColor(vec(200),"[RSC] 'Power Band' set to ",vec(0,0,255),Band:toString()+" MPH")
    }
    if(CMD==".brakemul"){
        hideChat(1)
        BrakeMul = ARG:toNumber()
        printColor(vec(200),"[RSC] Braking Mul set to ",vec(0,0,255),BrakeMul:toString())
    }
    if(CMD==".coal"){
            hideChat(1)
            if(Fireman){
                Coal = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC] Coal Level set to ",vec(36),Coal:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".water"){
            hideChat(1)
            if(Fireman){
                Water = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC] Water Level set to ",vec(36),Water:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".temp"){
            hideChat(1)
            if(Fireman){
                Temp = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC]Temperature set to ",vec(36),Temp:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".steam"){
            hideChat(1)
            if(Fireman){
                Steam = clamp(ARG:toNumber(),0,SafetyThresh)
                printColor(vec(200),"[RSC] Steam Pressure set to ",vec(36),Steam:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".commands"){
            hideChat(1)
            printColor(vec(200),"[RSC] Commands List (Type .help <command name> for details)\nACTIVE: .throttle .reverser .brake\nINACTIVE: .fireman\nANYTIME: .ignite .mul .band .brakemul .coal .water .temp .steam")
        }
        if(CMD==".help"){
            hideChat(1)
            switch(ARG){
                case "throttle",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".throttle\n",vec(200),"Syntax: ",vec(255,96,0),".throttle [number]\n",vec(200),"Description: ",vec(255,96,0),"Overrides the throttle setting to this value out of 10\n",vec(200),"Example: ",vec(255,96,0),".throttle 5")
                    break
                case "reverser",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".reverser\n",vec(200),"Syntax: ",vec(255,96,0),".reverser [number]\n",vec(200),"Description: ",vec(255,96,0),"Overrides the reverser setting to this value from -1 to +1\n",vec(200),"Example: ",vec(255,96,0),".reverser 0.25")
                    break
                case "brake",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".brake\n",vec(200),"Syntax: ",vec(255,96,0),".brake [boolean]\n",vec(200),"Description: ",vec(255,96,0),"1 applies, 0 releases. Leave blank for Emergency Brake.\n",vec(200),"Example: ",vec(255,96,0),".brake 1")
                    break
                case "ignite",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".ignite\n",vec(200),"Syntax: ",vec(255,96,0),".ignite [boolean]\n",vec(200),"Description: ",vec(255,96,0),"1 Ignites the fire, 0 extinguishes it.\n",vec(200),"Example: ",vec(255,96,0),".ignite 1")
                    break
                case "fireman",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".fireman\n",vec(200),"Syntax: ",vec(255,96,0),".fireman [boolean]\n",vec(200),"Description: ",vec(255,96,0),"Sets Manual Fireman Mode to this value.\n",vec(200),"Example: ",vec(255,96,0),".fireman 1")
                    break
                case "mul",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".mul\n",vec(200),"Syntax: ",vec(255,96,0),".mul [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Force multiplier to this value.\n",vec(200),"Example: ",vec(255,96,0),".mul 120")
                    break
                case "band",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".band\n",vec(200),"Syntax: ",vec(255,96,0),".band [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the (Ideal) Speed band before you need to lower reverser setting.\n",vec(200),"Example: ",vec(255,96,0),".band 30")
                    break
                case "brakemul",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".brakemul\n",vec(200),"Syntax: ",vec(255,96,0),".brakemul [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Independent Brake force Multiplier\n",vec(200),"Example: ",vec(255,96,0),".brakemul 400")
                    break
                case "coal",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".coal\n",vec(200),"Syntax: ",vec(255,96,0),".coal [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Coal Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".coal 100")
                    break
                case "water",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".water\n",vec(200),"Syntax: ",vec(255,96,0),".water [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Water Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".water 100")
                    break
                case "temp",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".temp\n",vec(200),"Syntax: ",vec(255,96,0),".temp [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Temperature Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".temp 100")
                    break
                case "steam",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".steam\n",vec(200),"Syntax: ",vec(255,96,0),".steam [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Steam Pressure Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".steam 100")
                    break
                default,
                    printColor(vec(200),"[RSC] Command not found. Type .commands for a list of commands.")
                    break
            }
        }
    
}



CPU = floor(cpuUsage()*1000000)
